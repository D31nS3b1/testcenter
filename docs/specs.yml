openapi: 3.0.0
info:
    title: ""
    description: 'This a spec for the (REST-) API of the IQB-Testcenter Application. It will be used to make backend''s e2e-test and a mock-server for frontend''s e2e-tests. It''s the basis for our vision of continuous integration.'
    version: 9.0.1
paths:
    '/booklet/{booklet_name}':
        get:
            summary: 'get a booklet'
            description: 'Retrieves a Booklet-XML'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user containing a personToken'
                    example: 'p:user000000000.test0000000'
                -
                    in: path
                    name: booklet_name
                    description: 'id of a executed test'
                    example: BOOKLET.SAMPLE
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'A Booklet-XML (see: https://github.com/iqb-berlin/testcenter-backend/blob/master/definitions/vo_Booklet.xsd)'
                    content:
                        application/xml:
                            example: '<?xml version="1.0" encoding="utf-8"?><Booklet...'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/booklet/{booklet_name}/data':
        get:
            summary: 'get status of a booklet'
            description: 'Retrieves a booklet - in this context that does not mean the booklet-file''s contents but status information about this booklet in regard of a given login: Is there a running test for this booklet etc.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user containing a personToken'
                    example: 'p:user000000000.test0000000'
                -
                    in: path
                    name: booklet_name
                    description: 'id of a executed test'
                    example: BOOKLET.SAMPLE
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'an object containing information about booklet'
                    content:
                        application/json:
                            example:
                                running: true
                                locked: false
                                label: 'Booklet''s little label'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/monitor/group/{group_name}':
        get:
            summary: 'get a group'
            description: 'Retrieves Information about a (testtakers-)group. It has to be *in the same workspace as the requesting user, who has to have in mode `monitor-group`.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for group-monitor'
                    example: 'g:user000000000.0000000000'
                -
                    in: path
                    name: group_name
                    description: 'name (id) of a group'
                    example: sample_group
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'return group data'
                    content:
                        application/json:
                            example:
                                label: 'Primary Sample Group'
                                name: sample_group
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Group not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /monitor/test-sessions:
        get:
            summary: 'get TestSessions of a group'
            description: 'Retrieves all running test sessions from group of a group-monitor. Returns also an URL to a websocket to subscribe this information if available. Sessions for Persons of this group which are not created right now get created.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for group-monitor'
                    example: 'g:user000000000.0000000000'
            responses:
                '200':
                    description: 'return group data'
                    content:
                        application/json:
                            example:
                                -
                                    personId: 1
                                    groupName: sample_group
                                    personLabel: sample_user/xxx
                                    groupLabel: 'Sample group'
                                    mode: run-hot-return
                                    testId: 1
                                    testState: {CURRENT_UNIT_ID: '1'}
                                    bookletName: BOOKLET.SAMPLE
                                    unitName: UNIT.SAMPLE
                                    unitState: {PRESENTATIONCOMPLETE: yes}
                                    timestamp: 1596455898
                                -
                                    personId: 3
                                    groupName: sample_group
                                    personLabel: test-group-monitor
                                    groupLabel: 'Sample group'
                                    mode: monitor-group
                                    testId: -1
                                    testState: []
                                    unitState: []
                                    timestamp: 1596455898
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /monitor/command:
        put:
            summary: 'send command'
            description: 'Send a monitor command to a set of running tests'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for group-monitor'
                    example: 'g:user000000000.0000000000'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                keyword:
                                    type: string
                                arguments:
                                    type: array
                                    items: {type: string}
                                timestamp:
                                    type: number
                                    description: 'when the command was given'
                                testIds:
                                    items: {type: integer}
                        example:
                            keyword: MY-COMMAND
                            arguments:
                                - arg1
                                - arg2
                            timestamp: 1597906980
                            testIds:
                                - 1
            responses:
                '201':
                    description: 'command sent'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /session:
        get:
            summary: 'get a session'
            description: 'returns session data according to an authToken.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    examples:
                        personToken:
                            description: 'auth-token for person'
                            value: 'p:0000000000000.00000000000'
                        loginToken:
                            description: 'auth-token for login (part I of 2-factor authorization only)'
                            value: 'l:user000000000.test0000000'
                        adminToken:
                            description: 'auth-token for admin'
                            value: 'a:user000000000.rw00000000'
            responses:
                '200':
                    description: 'OK, get session data'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/session'
                            examples:
                                personToken:
                                    value: {token: 'static:person:sample_group_sample_user_xxx', displayName: sample_group/sample_user/xxx, access: {test: [BOOKLET.SAMPLE]}, customTexts: {}, flags: []}
                                loginToken:
                                    value: {token: 'static:login:test', displayName: sample_group/sample_user, access: {}, customTexts: {}, flags: [codeRequired]}
                                adminToken:
                                    value: {token: 'static:admin:super', displayName: super, access: {superAdmin: []}, customTexts: {}, flags: []}
                '401':
                    description: 'No token qualifies for authentication'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /session/admin:
        put:
            summary: 'Start Admin Session'
            description: 'Starts a Session as Admin by Username and password'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/login_request'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/session'
                            example:
                                token: user000000000.0000000000
                                displayName: super
                                access:
                                    workspaceAdmin: [1]
                                    superAdmin: []
                '202':
                    description: 'User has account but neither workspace nor super-admin privilige'
                '400':
                    description: 'Insufficent Crendetials'
                '500':
                    description: 'Server Error'
    /session/login:
        put:
            summary: 'Start Login Session'
            description: 'Starts a Session as Login by Username and password If the login requires a subsequent code insertion, you get a session with no access and the request for a password. Otherwise a set of accessable booklets will be retrieved.'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/login_request'
                        example:
                            name: test
                            password: user123
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/session'
                            example:
                                token: static_login_sample_login
                                displayName: sample_group/sample_user
                                access: {}
                                customTexts: {}
                                flags:
                                    - codeRequired
                '400':
                    description: 'Insufficent Crendetials'
                '500':
                    description: 'Server Error'
    /session/person:
        put:
            summary: 'Start Person Session'
            description: 'Starts a Session for a Person, on the basis of LoginToken (!) which is Part II of the Two-Factor Authentication for code-demanding logins. Get a token for a person belonging to a login, as defined in a `Testtakers.xml`-file, together with some information about this person'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for a login-session'
                    example: 'l:user000000000.test0000000'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                code:
                                    type: string
                        example:
                            code: xxx
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/session'
                            example:
                                token: static_person_xxx
                                displayName: sample_group/sample_user/xxx
                                access:
                                    test: ['- BOOKLET.SAMPLE']
                                customTexts: {}
                                flags: []
                '400':
                    description: 'Insufficent Crendetials'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/speed-test/random-package/{size}':
        get:
            summary: 'download speedtest package'
            description: 'returns a random byte package - for speedtests'
            parameters:
                -
                    in: path
                    name: size
                    description: 'number of bytes to bedelivered - between 16 and 67108864'
                    example: 16
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'a object containg information about booklet'
                    content:
                        text/plain:
                            schema:
                                type: string
                            example: lrOI/JLFOAPBOHt=
                '406':
                    description: 'bad package size'
                '500':
                    description: 'server error'
    /speed-test/random-package:
        post:
            summary: 'upload speedtest package'
            description: 'receives any package and returns information about size and time - for speedtests'
            requestBody:
                content:
                    text/plain:
                        schema:
                            type: string
                        example: '1324567890123456'
            responses:
                '200':
                    description: 'a object containg information about booklet'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    requestTime: {type: number}
                                    packageReceivedSize: {type: number, example: 16}
                '500':
                    description: 'server error'
    /list/routes:
        get:
            summary: 'Lists all available endpoints'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            example:
                                - '[GET] /list/routes'
                '500':
                    description: 'Server Error'
    /system/config:
        get:
            summary: 'get system config'
            description: 'returns publicly available parts of system config - version number - customTexts for UI'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    version: {type: string}
                                    customTexts: {type: object}
                                required:
                                    - version
                                    - customTexts
                            example:
                                version: 9.0.1
                                customTexts: {}
                '500':
                    description: 'Server Error'
    /version:
        get:
            summary: 'get API version'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            example:
                                version: 9.0.1
    /workspaces:
        get:
            summary: 'get a list of workspaces'
            description: 'get a list of all workspaces'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            responses:
                '200':
                    description: 'List of Workspaces'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/workspace_list'
                            example:
                                -
                                    id: '1'
                                    name: example_workspace
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        delete:
            summary: 'delete some workspaces'
            description: 'deletes a list of workspaces given by their ids'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                ws:
                                    type: array
                                    description: 'list of Workspace-Id'
                                    items: {type: integer}
                            required:
                                - ws
                        example:
                            ws:
                                - 2
            responses:
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /users:
        get:
            summary: 'get a list of users'
            description: 'returns info about all registered users.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            responses:
                '200':
                    description: 'List of users'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/user_list'
                            example:
                                -
                                    name: super
                                    id: '1'
                                    email: null
                                    isSuperadmin: true
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        delete:
            summary: 'delete some users'
            description: 'deletes a list of given user-ids. ids wich did not exist get skipped; in other words there is no check if the user existed beforeheand.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                u:
                                    type: array
                                    items: {type: string, description: user-id}
                        example:
                            u:
                                - 2
            responses:
                '200':
                    description: ok
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /sys-checks:
        get:
            summary: 'get a list of SysChecks'
            description: 'get a list of available SysChecks (from all workspaces)'
            responses:
                '200':
                    description: 'list of SysChecks'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {workspaceId: {type: integer}, name: {type: string}, label: {type: string}, description: {type: string}}
                            example:
                                -
                                    workspaceId: 1
                                    name: SYSCHECK.SAMPLE
                                    label: 'An example SysCheck definition'
                                    description: 'An example SysCheck definition with long description'
                '204':
                    description: 'No SysChecks found.'
                '500':
                    description: 'Server Error'
    '/test/{test_id}':
        get:
            summary: 'get a test'
            description: "Retrieves a certain test: It's contents, state and the mode of current login-session.\n`laststate` is an array of key-value-pairs stored for this test.\nCurrently known test-modes are:  * `run-hot-return` - hot run of testLet, can save answers etc.,\n  session gets stored and can be revoked\n  * `run-hot-restart` - hot run of testLet, can save answers etc.,\n  every session starts all tests again and have unique Tokens\n  * `run-review` - run a review round of testLet, reviewes can be saved, but no answers\n  At the moment we distinguish between hot, trial and review in the GUI and there are no real\n  checks for the mode in this backend, except for the difference between `run-hot-return` and\n  `run-hot-restart`.\n  * `run-trial` - run a trial round\n  * `monitor-study` - TBA\n  * `monitor-group` - the monitor account to supervise a group of testees\n  * `run-demo`"
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'id of a executed test'
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'Test and it''s contents'
                    content:
                        application/json:
                            example:
                                mode: run-hot-return
                                laststate:
                                    CURRENT_UNIT_ID: '1'
                                locked: false
                                xml: '(contents of a booklet.xml)'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}':
        get:
            summary: 'get a unit of a test'
            description: 'retrieves a certain unit from a certain executed test - the booklet-file XML, last state and lock status'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'id of a executed test'
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (not alias!) as defined in booklet'
                    example: UNIT.SAMPLE
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'List of Workspaces'
                    content:
                        application/json:
                            example:
                                laststate:
                                    PRESENTATIONCOMPLETE: yes
                                restorepoint: 'whatever this player needs'
                                xml: '(contents of a unit.xml)'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/resource/{resource_name}':
        get:
            summary: 'get resource by name'
            description: 'retrieves a resource-file by its name (filename without extension)'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'id of a executed test'
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: resource_name
                    description: 'resource_name (filename without XML-extension)'
                    example: verona-simple-player-1.html
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'List of Workspaces'
                    content:
                        text/plain:
                            example: '(HTML code containing player)'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}/review':
        put:
            summary: 'add review to unit'
            description: 'add a review item to unit in a test'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (or alias) as defined in booklet'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                priority:
                                    description: 'priority, 1=critical, 2=medium, 3=optional'
                                    type: integer
                                entry:
                                    description: 'text of the review entry'
                                    type: string
                                categories:
                                    description: 'whitespace separated list of categories'
                                    type: string
                            required:
                                - entry
                        example:
                            entry: 'I am a critical review item for unit 1'
                            priority: 1
                            categories: 'content whatever'
            responses:
                '201':
                    x-dredd-test-order: 1
                    description: 'OK, created'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/review':
        put:
            summary: 'add review to booklet'
            description: 'add a review item to a certain booklet'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                priority:
                                    description: 'priority, 1=critical, 2=medium, 3=optional'
                                    type: integer
                                entry:
                                    description: 'text of the review entry'
                                    type: string
                                categories:
                                    description: 'whitespace separated list of categories'
                                    type: string
                            required:
                                - entry
                        example:
                            entry: 'I am a critical review item for booklet 1'
                            priority: 1
                            categories: 'content whatever'
            responses:
                '201':
                    description: 'OK, created'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}/response':
        put:
            summary: 'add response to a unit'
            description: 'when running a test this endpoint is used to store given responses. format and content of responses are business of the corresponding player, the endpoints takes everything as raw, may it be JSON or XML or whatever.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (or alias) as defined in booklet'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                response:
                                    description: 'response data'
                                    type: string
                                timeStamp:
                                    description: 'timestamp of the response'
                                    type: integer
                                responseType:
                                    description: 'TODO what is this?'
                                    type: string
                            required:
                                - response
                                - timeStamp
                        example:
                            response: 'I am the answers to your questions.'
                            timeStamp: 1582550888563
            responses:
                '201':
                    description: 'OK, created'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}/restorepoint':
        patch:
            summary: 'save a restorepoint'
            description: 'saves a restorepoint - a data blob indicating the sate of unit player. what is in this blob is business of the player.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (or alias) as defined in booklet'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                restorePoint:
                                    description: 'restore point data'
                                    type: string
                                timeStamp:
                                    description: 'timestamp of the snapshot'
                                    type: integer
                            required:
                                - response
                                - timeStamp
                        example:
                            restorePoint: '{"string_example":"something","color_example":"#ffa200","number_example":"36"}'
                            timeStamp: 1582550888563
            responses:
                '200':
                    description: 'OK, updated'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}/state':
        patch:
            summary: 'save a state for a unit'
            description: 'Updates the state (a key-value list) of a unit in a running test with a given key-value pair. Some known state-keys are: - ''PRESENTATIONCOMPLETE'' - ''RESPONSECOMPLETE'' - ''PAGE_NR'' - ''PAGE_COUNT'' - ''PAGE_NAME'' but all strings are allowed. For more about states see - https://github.com/iqb-berlin/testcenter-frontend/blob/55b2ba599264587e0175503cae66073211c3adb1/src/app/test-controller/test-controller.interfaces.ts#L53 - https://verona-interfaces.github.io/player/#operation-subscribe-vopStateChangedNotification'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (or alias) as defined in booklet'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/state'
                        example:
                            -
                                key: PRESENTATIONCOMPLETE
                                content: "yes\n"
                                timeStamp: 50003
                            -
                                key: SOME_OTHER_KEY
                                content: any_value
                                timeStamp: 50002
            responses:
                '200':
                    description: 'OK, updated'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/state':
        patch:
            summary: 'update state of a running test'
            description: 'Updates the state (a key-value list) of a running test with a given key-value pair. Some known state-keys are: - ''CURRENT_UNIT'' - ''CONTROLLER'' but all strings are allowed. For more about states see - https://github.com/iqb-berlin/testcenter-frontend/blob/55b2ba599264587e0175503cae66073211c3adb1/src/app/test-controller/test-controller.interfaces.ts#L53'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/state'
                        example:
                            -
                                key: CURRENT_UNIT_ID
                                content: UNIT_ID_X
                                timeStamp: 60000
                            -
                                key: CONTROLLER
                                content: PAUSED
                                timeStamp: 70000
            responses:
                '200':
                    description: 'OK, updated'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/unit/{unit_name}/log':
        put:
            summary: 'save a log-entry for a unit'
            description: 'Saves an array of log-entries for a unit in a running test. A log entry consists of a (JSON-encoded) content which is optional. Some currently used lognetry key words for units are- UNITENTER, UNITTRYLEAVE, PRESENTATIONCOMPLETE, RESPONSESCOMPLETE, PAGENAVIGATIONSTART, PAGENAVIGATIONCOMPLETE.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: unit_name
                    description: 'unit-name (or alias) as defined in booklet'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/log_set'
                        example:
                            -
                                key: 'PAGENAVIGATIONSTART: "#first"'
                                timeStamp: 1582230020
                            -
                                key: PAGENAVIGATIONEND
                                content: '#first'
                                timeStamp: 1234596899
            responses:
                '201':
                    description: 'OK, log saved'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/log':
        put:
            summary: 'save log-entries for a running test'
            description: 'Saves an array of log-entries for a running test. A log entry consists of a (JSON-encoded) content which is optional. Some currently used lognetry key words for booklets are- BOOKLETLOADSTART, BOOKLETLOADCOMPLETE, BOOKLETLOCKEDbyTESTEE.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/log_set'
                        example:
                            -
                                key: BOOKLETLOADSTART
                                content: '{Browser:"Dredd"}'
                                timeStamp: 1582230020
            responses:
                '201':
                    description: 'OK, log saved'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    '/test/{test_id}/lock':
        patch:
            summary: 'finish a test'
            description: 'locks (finishes) a runnin test'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'OK, locked'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '500':
                    description: 'Server Error'
    /test:
        put:
            summary: 'start a test'
            description: 'Creates a new test for a given person and booklet-name'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                bookletName:
                                    description: 'name of the booklet to start'
                                    type: string
                            required:
                                - bookletName
                        example:
                            bookletName: BOOKLET.SAMPLE
            responses:
                '201':
                    description: 'OK, started'
                    content:
                        text/plain:
                            example: '1'
                '401':
                    description: 'Not authenticated - auth token header is missing or not containing a login token'
                '403':
                    description: Forbidden
                '423':
                    description: 'Test is locked!'
                '500':
                    description: 'Server Error'
    '/test/{test_id}/command/{command_id}/executed':
        patch:
            summary: 'set command as executed'
            description: "When the frontend executed a command, we send back this information to Backend via this command,\nto make sure it never gets executed again."
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: command_id
                    description: 'unique id of a command'
                    example: 3
                    required: true
                    schema:
                        type: number
            responses:
                '200':
                    description: 'OK, command is marked as executed (or was already set as executed before)'
                '401':
                    description: 'Not authenticated - auth token header is missing or not containing a login token'
                '403':
                    description: Forbidden
                '423':
                    description: 'Test is locked!'
                '500':
                    description: 'Server Error'
    '/test/{test_id}/commands':
        get:
            summary: 'get commands'
            description: "Returns commands from the group-monitor (test-proctor) if given. They can be polled or subscribed via websocket\nif available. The websocket adress is stored in header \"SubscribeURI\"."
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for test-user'
                    example: 'p:0000000000000.00000000000'
                -
                    in: path
                    name: test_id
                    description: 'test-id - id of a test execution.'
                    example: 1
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                lastCommandId:
                                    description: 'Optional. The id of a command. If given, only subsequent commands will be retrieved.'
                                    type: integer
                            required:
                                - bookletName
                        example:
                            lastCommandId: 2
            responses:
                '200':
                    description: 'list of subsequent commands'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {id: {type: number, description: 'a unique ID to make sure, the command get never executed twice'}, keyword: {type: string, description: 'the command-keyword. TODO - add known keywords'}, arguments: {type: array, description: 'a list of token as arguments provided with the keyword', items: {type: string}}, timeStamp: {type: number, description: 'timstamp when the command was given'}}
                            example:
                                -
                                    id: 3
                                    keyword: COMMAND
                                    arguments: [p4]
                '401':
                    description: 'Not authenticated - auth token header is missing or not containing a login token'
                '403':
                    description: Forbidden
                '423':
                    description: 'Test is locked!'
                '500':
                    description: 'Server Error'
    '/user/{user_id}/workspaces':
        get:
            summary: 'get a list of workspaces'
            description: 'get a list of all workspaces belonging to a given user'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: user_id
                    description: user-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'List of Workspaces'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/workspace_list'
                            example:
                                -
                                    id: '1'
                                    name: example_workspace
                                    selected: false
                                    role: ""
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        patch:
            summary: 'change user roles'
            description: 'change user roles for a given user in several workspaces. *Provide user-name, not user-id!*'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: user_id
                    description: user-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                ws:
                                    type: array
                                    description: 'array of pairs role-id'
                                    items: {type: object, properties: {id: {type: integer, description: workspace-id}, role: {type: string, description: 'role: ''RW'', ''MO'' or ''RO'''}}}
                            required:
                                - ws
                        example:
                            ws:
                                -
                                    role: RW
                                    id: 1
            responses:
                '200':
                    description: 'OK, roles have been updated'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /user:
        put:
            summary: 'add a user'
            description: 'add a user'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/user'
                        example:
                            n: thirdUser
                            p: thirdUsersPassword
            responses:
                '201':
                    description: 'OK, user has been added'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/user/{user_id}/password':
        patch:
            summary: 'change user-password'
            description: 'changes the password of a given user.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: user_id
                    description: user-id
                    example: 2
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/user'
                        example:
                            p: secondUsersNewPassword
            responses:
                '200':
                    description: 'password has changed / user did not exist'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/user/{user_id}/super-admin/{new_status}':
        patch:
            summary: 'change super-admin status'
            description: 'changes the super-admin status of a given user. * **requires a super-admin** * **requires the password of the performing user for security reasons** * `new_status` is `on` or `off`'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: user_id
                    description: user-id
                    example: 2
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: new_status
                    description: 'super-user status of the given user `on` or `off`'
                    example: on
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                p:
                                    type: string
                                    description: 'performing user''s password'
                                    example: user123
            responses:
                '200':
                    description: 'password has changed / user did not exist'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/file/{type}/{filename}':
        get:
            summary: 'get file'
            description: 'retrieves a file form a goven workspace by filename'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    schema:
                        $ref: '#/components/schemas/auth'
                    example: 'a:user000000000.ro00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    schema:
                        type: integer
                    required: true
                -
                    in: path
                    name: type
                    description: 'file type - Testtakers | Booklet | Resource | Unit | SysCheck - CASE SENSITIVE!'
                    example: Unit
                    required: true
                    schema:
                        type: string
                -
                    in: path
                    name: filename
                    description: 'filename. - CASE SENSITIVE!'
                    example: SAMPLE_UNIT.XML
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'File contents'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'workspace or file not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/logs':
        get:
            summary: 'get logs'
            description: 'retrieves unit and booklet logs from this workspace'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    schema:
                        $ref: '#/components/schemas/auth'
                    example: 'a:user000000000.ro00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: query
                    name: groups
                    schema:
                        type: array
                        description: 'a list'
                        items:
                            type: string
                    example:
                        - sample_group
            responses:
                '200':
                    description: 'OK, list of logs'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {unitname: {type: string}, bookletname: {type: string}, groupname: {type: string}, loginname: {type: string}, code: {type: string, description: 'person code'}, timestamp: {type: string}, logentry: {type: string}}
                            example:
                                -
                                    unitname: UNIT.SAMPLE
                                    bookletname: BOOKLET.SAMPLE
                                    groupname: sample_group
                                    loginname: test
                                    code: sxx
                                    timestamp: '1568026665043'
                                    logentry: 'sample unit log'
                                -
                                    bookletname: BOOKLET.SAMPLE
                                    groupname: sample_group
                                    loginname: test
                                    code: sxx
                                    timestamp: '1568026665043'
                                    logentry: 'sample log entry'
                                    unitname: ""
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/responses':
        get:
            summary: 'get responses'
            description: 'retrieves a list of responses by a given list of groups'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    schema:
                        $ref: '#/components/schemas/auth'
                    example: 'a:user000000000.ro00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: query
                    name: groups
                    schema:
                        type: array
                        description: 'a list'
                        items:
                            type: string
                    example:
                        - sample_group
            responses:
                '200':
                    description: 'OK, list of responses'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {unitname: {type: string}, responses: {type: string, description: 'may contain encoded JSON'}, responsetype: {type: string}, laststate: {type: string, description: 'may contain encoded JSON'}, bookletname: {type: string}, restorepoint_ts: {type: string}, responses_ts: {type: string, description: 'contains a unix timestamp'}, restorepoint: {type: string}, groupname: {type: string}, loginname: {type: string}, code: {type: string, description: 'login code'}}
                                example:
                                    - {unitname: UNIT.SAMPLE, responses: '{"name":"Sam Sample","age":34}', responsetype: "", laststate: '{"PRESENTATIONCOMPLETE":"yes"}', bookletname: BOOKLET.SAMPLE, restorepoint_ts: '0', responses_ts: '1567778660869', restorepoint: null, groupname: sample_group, loginname: test, code: jsx}
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        delete:
            summary: 'delete data'
            description: 'deletes all results and monitor data of a group of groups'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role "RW" (read/write) for this workspace'
                    example: 'a:user000000000.rw00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                groups:
                                    type: array
                                    description: 'array of group names'
                                    items: {type: string}
                        example:
                            groups:
                                - sample_group
            responses:
                '200':
                    description: OK
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'workspace or file not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/results':
        get:
            summary: 'get results'
            description: 'retrieves a list of unit- and booklet results for a given workspace and groups'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'OK, list of results'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {groupname: {type: string}, bookletsStarted: {type: integer}, num_units_min: {type: string}, num_units_max: {type: string}, num_units_total: {type: string}, lastchange: {type: string, description: timestamp}, num_units_mean: {type: integer}}
                            example:
                                -
                                    groupname: sample_group
                                    bookletsStarted: 1
                                    num_units_min: '1'
                                    num_units_max: '1'
                                    num_units_total: '1'
                                    lastchange: '1567776853037'
                                    num_units_mean: 1
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/reviews':
        get:
            summary: 'get reviews'
            description: 'retrieves a list of unit- and booklet-reviews for a given workspace and groups'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: query
                    name: groups
                    schema:
                        type: array
                        description: 'a list'
                        items:
                            type: string
                    example:
                        - sample_group
            responses:
                '200':
                    description: 'OK, list of reviews'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties: {unitname: {type: string, description: 'stays empty if booklet review'}, bookletname: {type: string}, groupname: {type: string}, code: {type: string, description: 'login code'}, entry: {type: string}, priority: {type: string}, categories: {type: string}}
                            example:
                                -
                                    unitname: UNIT.SAMPLE
                                    bookletname: BOOKLET.SAMPLE
                                    groupname: sample_group
                                    loginname: test
                                    code: euf
                                    reviewtime: '2019-09-06 11:19:56'
                                    entry: 'this is a sample unit review'
                                    priority: '1'
                                    categories: ""
                                -
                                    bookletname: BOOKLET.SAMPLE
                                    groupname: sample_group
                                    loginname: test
                                    code: euf
                                    reviewtime: '2019-09-06 11:19:56'
                                    entry: 'sample booklet review'
                                    priority: '1'
                                    categories: ""
                                    unitname: ""
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/file':
        post:
            summary: 'upload file'
            description: "Uploads a Resource, Unit, Booklet, SysCheck or Testtakers file. The File gets imported to the workspace if it\nis valid, and passes the cross-validation checks. So a file which depends of a non-existing player will get\nrejected as well as an invalid xml file.\n\nWhen a file with the same filename and type exists in the workspace, it gets overwritten! Except if the the\ninternal id (the <ID>-Tag as used in Unit-files for example) of the old and the new file differs. In this case\nit's assumed, that the file-name-duplication is inintentional an the new import gets rejected.\n\nThe endpoint accepts all kinds of files. Zip-achrives get extracted an treated the same as multi-file-upload."
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role "RW" (read/write) for this workspace'
                    example: 'a:user000000000.rw00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                fileforvo:
                                    type: string
                                    description: 'upload file'
                                    example: '(content of Unit.xml)'
                                anything:
                                    type: string
                                    example: goes
                            required:
                                - fileforvo
            responses:
                '201':
                    description: 'Upload Successful'
                    content:
                        application/json:
                            example:
                                SAMPLE_UNIT.XML:
                                    warning: ['File of name `SAMPLE_UNIT.XML` did already exist and was overwritten.']
                '207':
                    description: 'Upload Successful, import of one or more files was rejected'
                    content:
                        application/json:
                            example:
                                SAMPLE_UNIT.XML:
                                    error: ['Invalid root-tag: `Invalid`']
                '400':
                    description: 'file could not be uploaded or is invalid.'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'workspace not found'
                '410':
                    description: 'Session Expired'
                '413':
                    description: 'File too large'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/files':
        get:
            summary: 'get files of workspace'
            description: 'get a list of all files in workspace'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'OK, a list of files'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/file_list'
                            example:
                                Resource:
                                    - {name: SAMPLE_UNITCONTENTS.HTM, size: 13392, modificationTime: 1610547959, type: Resource, id: SAMPLE_UNITCONTENTS.HTM, report: [], info: []}
                                    - {name: verona-simple-player-1.html, size: 29960, modificationTime: 1610547959, type: Resource, id: VERONA-SIMPLE-PLAYER-1.HTML, report: {info: 'Verona-Version supported: 2.1.0'}, info: {label: 'Simple Verona Player 1 - 1.0.1', verona-version: 2.1.0, version: 1.0.1}}
                                Unit:
                                    - {name: SAMPLE_UNIT.XML, size: 497, modificationTime: 1610547959, type: Unit, id: UNIT.SAMPLE, report: [], info: {description: 'This is a sample unit showing the possibilities of the sample player.', label: 'A sample unit', totalSize: 13889}}
                                    - {name: SAMPLE_UNIT2.XML, size: 1737, modificationTime: 1610547959, type: Unit, id: UNIT.SAMPLE-2, report: [], info: {description: 'This is an Unit', label: 'A sample unit', totalSize: 1737}}
                                Booklet:
                                    - {name: SAMPLE_BOOKLET.XML, size: 1213, modificationTime: 1610547959, type: Booklet, id: BOOKLET.SAMPLE, report: [], info: {description: 'This a sample booklet for testing/development/showcase purposes.', label: 'Sample booklet', totalSize: 46799}}
                                    - {name: SAMPLE_BOOKLET2.XML, size: 564, modificationTime: 1610547959, type: Booklet, id: BOOKLET.SAMPLE-2, report: [], info: {label: 'Reduced Booklet', totalSize: 46150}}
                                Testtakers:
                                    - {name: SAMPLE_TESTTAKERS.XML, size: 2106, modificationTime: 1610547959, type: Testtakers, id: SAMPLE_TESTTAKERS.XML, report: [], info: {description: 'This file contains some logins for testing and works a a sample for developers.', testtakers: 10}}
                                SysCheck:
                                    - {name: SAMPLE_SYSCHECK.XML, size: 1239, modificationTime: 1610547959, type: SysCheck, id: SYSCHECK.SAMPLE, report: [], info: {description: 'An example SysCheck definition with long description', label: 'An example SysCheck definition'}}
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        delete:
            summary: 'delete files'
            description: 'deletes files from a workspace'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role "RW" (read/write) for this workspace'
                    example: 'a:user000000000.rw00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                f:
                                    type: array
                                    description: 'array of file names'
                                    items: {type: string}
                        example:
                            f:
                                - SysCheck/SAMPLE_SYSCHECK.XML
                                - 'some rubbish'
                                - a/b
                                - ../../README.md
            responses:
                '207':
                    description: 'OK, a list of files'
                    content:
                        application/json:
                            example:
                                deleted:
                                    - SysCheck/SAMPLE_SYSCHECK.XML
                                did_not_exist:
                                    - 'some rubbish'
                                    - a/b
                                not_allowed:
                                    - ../../README.md
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '404':
                    description: 'Workspace not found'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    /workspace:
        put:
            summary: 'add a workspace'
            description: 'adds a workspace with given name'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    type: string
                                    description: 'workspace name'
                            required:
                                - name
                        example:
                            name: 'new work space'
            responses:
                '201':
                    description: 'OK, workspace has been added'
                '401':
                    description: 'Not authenticated'
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}':
        get:
            summary: 'get workspace'
            description: 'returns basic information about a workspace'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'OK, workspace info'
                    content:
                        application/json:
                            example:
                                id: 1
                                name: example_workspace
                                role: RW
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        patch:
            summary: 'rename a workspace'
            description: 'renames a workspace with given id'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    type: string
                                    description: Password
                            required:
                                - n
                        example:
                            name: 'a new york space'
            responses:
                '200':
                    description: 'OK, workspace has been renamed'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/users':
        patch:
            summary: 'change user roles'
            description: 'change user roles in a given workspaces'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                u:
                                    type: array
                                    description: 'array of pairs role-id'
                                    items: {type: object, properties: {id: {type: integer, description: user-id}, role: {type: string, description: 'role: ''RW'', ''MO'' or ''RO'''}}}
                            required:
                                - u
                        example:
                            u:
                                -
                                    role: RW
                                    id: 1
            responses:
                '200':
                    description: 'OK, roles has been updated'
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        get:
            summary: 'get a list of users in a workspace'
            description: 'returns info about all registered users in a workspace.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with super-admin privilege'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'List of users'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/user_list'
                            example:
                                -
                                    name: super
                                    id: '1'
                                    selected: true
                                    role: RW
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/sys-check/reports':
        get:
            summary: 'get reports'
            description: 'return a compilation of reports from given syschecks in JSON or CSV format.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    example: 'a:user000000000.superadmin0'
                -
                    in: query
                    name: format
                    description: 'Response format: json or csv. This is implemented because of a Bug in Dredd and will be removed'
                    example: csv
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: query
                    name: checkIds
                    description: 'a comma separated list of sys-check-ids'
                    example: SYSCHECK.SAMPLE
                -
                    in: query
                    name: delimiter
                    description: '(optional) for CSV output only - delimiter character for cells. Allowed Values: '','', '';'', ''|'', ''\t'', ''\s''. Defaults to '',''.'
                    example: ','
                -
                    in: query
                    name: lineEnding
                    description: "(optional) for CSV output only - character for line endings. Allowed Values: '\\r\\n' (Windows), '\\r' (Mac), '\\n' (Unix) Defaults to '\n'."
                    example: ""
                -
                    in: query
                    name: enclosure
                    description: '(optional) for CSV output only - quotation character for cell enclosure. Allowed Values: " and ''. Defaults to ".'
                    example: '"'
            responses:
                '200':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
        delete:
            summary: 'delete reports'
            description: 'delete some SysCheck-reports'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role "RW" (read/write) for this workspace'
                    example: 'a:user000000000.rw00000000'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                checkIds:
                                    type: array
                                    description: 'array of sys-check-Ids'
                                    items: {type: string}
                            required:
                                - checkIds
                        example:
                            checkIds:
                                - SYSCHECK.SAMPLE
            responses:
                '207':
                    description: 'OK, a list of deleted files'
                    content:
                        application/json:
                            example:
                                deleted:
                                    - SysCheck/SAMPLE_SYSCHECK.XML
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/sys-check/reports/overview':
        get:
            summary: 'get a list of all sys-check-reports'
            description: 'returns a list of all sys-check-reports with most important features grouped by the sys-checks.'
            parameters:
                -
                    in: header
                    name: AuthToken
                    description: 'auth-token for admin-user with role at least "RO" (read only) for this workspace'
                    example: 'a:user000000000.superadmin0'
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
            responses:
                '200':
                    description: 'List of digests of Sys-Check-Reports'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    description: 'aggregations of sys-check-reports to a specific report'
                                    properties: {id: {type: string, description: 'id of the *SysCheck* to which theese reports belongs'}, count: {type: number, description: 'number of aggregated sys-check-reports'}, label: {type: string, description: 'label of the SysCheck'}, details: {type: object, description: 'assoc containing statistics over most important report-fields in the form feature - nummer of occurances'}}
                            example:
                                -
                                    id: SYSCHECK.SAMPLE
                                    count: 1
                                    label: 'An example SysCheck definition'
                                    details: {os: {'Linux x86_64': 1}, browser: {'Chrome 79': 1}}
                '401':
                    description: 'Not authenticated'
                '403':
                    description: Forbidden
                '410':
                    description: 'Session Expired'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/sys-check/{sys_check_name}':
        get:
            summary: 'get sysCheck'
            description: 'returns a specific SysCheck configuation **this endpoint does not need any authetication!**'
            parameters:
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: sys_check_name
                    description: 'name of the SysCheck (as stored in the XML)'
                    example: SYSCHECK.SAMPLE
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'Configuation of a SysCheck (as JSON, not as plain XML)'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/sys_check'
                '404':
                    description: 'No SysCheck with that name found on Workspace'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/sys-check/{sys_check_name}/unit-and-player':
        get:
            summary: 'get SysCheck Unit and Player'
            description: 'returns a container with the unit and it''s player according to a SysCheck'
            parameters:
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: sys_check_name
                    description: 'name of the SysCheck (as stored in the XML)'
                    example: SYSCHECK.SAMPLE
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'A container with the unit and it''s player'
                '404':
                    description: 'No SysCheck with that name found on Workspace'
                '500':
                    description: 'Server Error'
    '/workspace/{ws_id}/sys-check/{sys_check_name}/report':
        put:
            summary: 'new SysCheck-report'
            description: 'save the results of a performed SysCheck'
            parameters:
                -
                    in: path
                    name: ws_id
                    description: workspace-id
                    example: 1
                    required: true
                    schema:
                        type: integer
                -
                    in: path
                    name: sys_check_name
                    description: 'name of the SysCheck (as stored in the XML)'
                    example: SYSCHECK.SAMPLE
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        example:
                            keyPhrase: saveme
                            title: dsk
                            environment:
                                -
                                    id: '0'
                                    type: environment
                                    label: Betriebsystem
                                    value: Linux
                                    warning: false
                                -
                                    id: '0'
                                    type: network
                                    label: Downloadgeschwindigkeit
                                    value: '68.01 Mbit/s'
                                    warning: false
                            questionnaire: []
                            unit:
                                -
                                    id: '0'
                                    type: unit/player
                                    label: 'loading time'
                                    value: '27'
                                    warning: false
            responses:
                '201':
                    description: 'Ok, Report saved'
                '404':
                    description: 'No SysCheck with that name found on Workspace'
                '500':
                    description: 'Server Error'
components:
    schemas:
        auth:
            type: object
            properties:
                at:
                    type: string
                    description: 'authtoken für admin and maybe super admin modules'
                    example: user000000000.superadmin0
            required:
                - at
        auth_test:
            type: object
            properties:
                p:
                    type: string
                    description: 'authtoken für test module - person'
                    example: person00000000.test0000000
                l:
                    type: string
                    description: 'authtoken für test module - login'
                    example: person00000000.test0000000
            required:
                - l
        login_request:
            type: object
            properties:
                name:
                    type: string
                    description: Username
                    example: super
                password:
                    type: string
                    description: Password
                    example: user123
        session:
            description: 'content of a session'
            type: object
            properties:
                token:
                    type: string
                    description: 'Token for session authentication'
                    example: person00000000.test0000000
                displayName:
                    type: string
                    description: 'name to be displayed'
                    example: super
                customTexts:
                    type: object
                    description: 'An Object containing customtext-strings for the UI as key-value-pairs'
                    example:
                        somestr: string
                flags:
                    type: array
                    description: "flags with additional information.\n  * `codeRequired` that indicates that a second part of authentication is required"
                access:
                    description: 'A collection of available obejcts. The keys are type of object.'
                    type: object
                    properties:
                        workspaceAdmin:
                            type: string
                            description: 'Elements are (numeric) Workspace-Ids. Use `[GET] /workspace/{worksapce_id}` to obtain label, user-rights and such.'
                        superAdmin:
                            type: string
                            description: 'No Elements. Presence of this key indicates access to Superadmin-functions for this user.'
                        test:
                            type: string
                            description: 'Elements are booklet-names (not test-ids because unstarted tests don''t have one. Through the endpoint `[GET] /booklet/{test_name}` the corresponding ids, and if startet, status etc. can be obtained.'
                        testGroupMonitor:
                            type: string
                            description: workspace(s)
        workspace:
            type: object
            properties:
                id:
                    type: string
                    example: '1'
                name:
                    type: string
                    example: example_workspace
                role:
                    type: string
                    example: RW
                selected:
                    type: boolean
                    example: false
                    description: 'TODO what does this do?'
            required:
                - id
        workspace_list:
            type: array
            description: 'List of Workspaces'
            items:
                $ref: '#/components/schemas/workspace'
        user_list:
            type: array
            description: 'List of Users'
            items:
                $ref: '#/components/schemas/user'
        user:
            type: object
            description: 'a user'
            properties:
                name:
                    type: string
                    example: super
                id:
                    type: string
                    example: '1'
                email:
                    type: string
                    nullable: true
                    example: null
                isSuperadmin:
                    type: boolean
                    example: true
                selected:
                    type: boolean
                    example: true
                    description: 'TODO what does this do?'
                role:
                    type: string
                    example: RW
            required:
                - id
                - name
        file:
            type: object
            description: 'information about a file'
            properties:
                filename:
                    type: string
                filesize:
                    type: integer
                    description: 'file size in byte'
                filesizestr:
                    type: string
                    description: 'human readable filesize'
                filedatetime:
                    type: integer
                    description: 'modification date as unix time stamp'
                filedatetimestr:
                    type: string
                    description: 'modification date as human readable string'
                type:
                    type: string
                    description: 'Testtakers | Booklet | Resource | Unit | SysCheck'
                typelabel:
                    type: string
                    description: 'Testtakers | Booklet | Resource | Unit | SysCheck'
        file_list:
            type: array
            description: 'List of Files'
            items:
                $ref: '#/components/schemas/file'
        sys_check:
            type: object
            description: 'Configuration of a SysCheck'
            properties:
                name:
                    description: 'name of the SysCheck as defiend in the XML-file'
                    type: string
                label:
                    description: 'label to display'
                    type: string
                questions:
                    description: 'set of questions for the questionaire'
                    type: array
                    items:
                        $ref: '#/components/schemas/question_def'
                hasUnit:
                    description: 'is there a unit for this SysCheck?'
                    type: boolean
                canSave:
                    description: 'is saving SysCheck-Report allowed?'
                    type: boolean
                customTexts:
                    description: CustomTexts
                    type: object
                skipNetwork:
                    description: 'skip the network test?'
                    type: boolean
                downloadSpeed:
                    $ref: '#/components/schemas/speed_params'
                uploadSpeed:
                    $ref: '#/components/schemas/speed_params'
                workspaceId:
                    description: 'on which workspace is this SysCheck?'
                    type: number
        speed_params:
            type: object
            description: 'paramaters of a speed-check'
            properties:
                min:
                    description: 'minimal speed to get a `sufficient` rating in **Bytes per second**'
                    type: number
                    example: 1875000
                good:
                    description: 'minimal speed to get a `good` rating in **Bytes per second**'
                    type: number
                    example: 3750000
                maxDevianceBytesPerSecond:
                    description: 'maximal deviance allowed to pass one round of regeression test in **Bytes per second**'
                    type: number
                    example: 100000
                maxErrorsPerSequence:
                    description: 'allow this number of errors in one sequence and still pass, normally 0'
                    type: integer
                    example: 0
                maxSequenceRepetitions:
                    description: 'how many test sequences should be run (if they exceedmax deviance), minimum is 3'
                    type: integer
                    example: 15
                sequenceSizes:
                    description: 'array of numbers describing the packagae sized for each sequence'
                    type: array
                    items:
                        type: integer
                    example:
                        - 400000
                        - 800000
                        - 1600000
                        - 3200000
        question_def:
            type: object
            description: 'definition of a SysCheck-questionaire'
            properties:
                id:
                    type: number
                    description: 'identifier of the question'
                    example: 1
                type:
                    description: 'type of the questions, like ''header'', ''string'', ''select'', ''text'', ''check'', ''radio'''
                    type: string
                    example: select
                prompt:
                    description: 'Question text'
                    type: string
                    example: 'What is the capital of Switzerland?'
                options:
                    description: 'list of options for type `check` or `select`'
                    type: array
                    items:
                        type: string
                    example:
                        - Bern
                        - Zurich
                required:
                    description: 'is this question required'
                    type: boolean
                    example: false
        state:
            type: array
            description: 'An array of state-items.'
            items:
                $ref: '#/components/schemas/state_item'
        state_item:
            type: object
            description: 'Represents a certain entry in the state. Every key-value pair can be taken. For more about test and unit states'
            properties:
                key:
                    type: string
                    example: STATE_KEY
                    description: 'The key of this state'
                content:
                    type: string
                    example: STATE_VALUE
                    description: 'The value of this state. For logs this is optional, since a log can be only a single string.'
                timeStamp:
                    type: number
                    example: 123456798
                    description: 'Because every state change gets logged a timestamp is necessary'
            required:
                - key
                - content
                - timeStamp
        log_set:
            type: array
            description: 'An array of state-items.'
            items:
                $ref: '#/components/schemas/log_set_item'
        log_set_item:
            type: object
            description: 'Represents a certain entry in the state. Every key-value pair can be taken. For more about test and unit states'
            properties:
                key:
                    type: string
                    example: STATE_KEY
                    description: 'The key of this state'
                content:
                    type: string
                    example: STATE_VALUE
                    description: 'The value of this state. For logs this is optional, since a log can be only a single string.'
                timeStamp:
                    type: number
                    example: 123456798
                    description: 'Because every state change gets logged a timestamp is necessary'
            required:
                - key
                - timeStamp
