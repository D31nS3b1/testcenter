var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.861,1,1.6]],["body/modules/AppModule.html",[0,2.541,1,2.979,2,1.875,3,3.018,4,2.227,5,2.227,6,1.681,7,0.051,8,1.681,9,3.018,10,2.227,11,2.227,12,0.462,13,0.462,14,0.388,15,0.191,16,2.761,17,3.743,18,1.46,19,2.478,20,2.478,21,2.478,22,2.478,23,2.478,24,1.386,25,3.743,26,0.725,27,3.743,28,2.227,29,1.663,30,1.46,31,2.761,32,2.761,33,1.283,34,1.612,35,1.612,36,2.185,37,2.761,38,2.761,39,2.761,40,2.761,41,1.875,42,2.761,43,2.761,44,2.761,45,2.761,46,0.462,47,0.462,48,0.034,49,0.034]],["title/interfaces/Command.html",[50,1.069,51,1.218]],["body/interfaces/Command.html",[7,0.051,12,0.513,13,0.513,14,0.43,15,0.212,46,0.749,48,0.037,49,0.037,50,1.196,51,2.108,52,1.556,53,1.789,54,0.28,55,1.206,56,4.745,57,4.925,58,4.745,59,1.054,60,4.745,61,1.732,62,0.515,63,2.271,64,1.556,65,2.081,66,2.471,67,2.471,68,2.471,69,2.471,70,2.471,71,1.556,72,3.065,73,3.065,74,4.012,75,3.065,76,3.065,77,3.065,78,3.065,79,3.065,80,3.065,81,3.065,82,3.065,83,1.556,84,2.471,85,1.789,86,0.805,87,3.065,88,1.745,89,3.065,90,3.065]],["title/controllers/CommandController.html",[21,1.6,91,0.625]],["body/controllers/CommandController.html",[7,0.051,8,1.492,12,0.486,13,0.486,14,0.407,15,0.267,18,1.132,21,2.258,24,1.22,26,0.762,41,1.97,46,0.486,47,0.486,48,0.035,49,0.035,51,1.289,54,0.265,59,0.762,62,0.334,71,1.964,88,1.509,91,0.883,92,2.339,93,1.163,94,3.869,95,2.901,96,2.904,97,1.289,98,3.869,99,0.872,100,2.901,101,0.872,102,0.872,103,0.762,104,1.163,105,1.693,106,1.163,107,1.473,108,1.693,109,1.473,110,1.97,111,2.901,112,0.994,113,1.163,114,1.163,115,1.143,116,2.901,117,2.901,118,2.901,119,2.901,120,2.258,121,2.901,122,1.289,123,2.258,124,3.869,125,2.901,126,1.97,127,2.339,128,2.901,129,2.901,130,1.97,131,2.901]],["title/classes/ErrorHandler.html",[36,1.6,47,0.459]],["body/classes/ErrorHandler.html",[7,0.052,12,0.401,13,0.401,14,0.336,15,0.296,24,1.125,26,0.629,28,1.932,33,1.468,36,1.98,46,0.401,47,0.401,48,0.031,49,0.031,54,0.219,55,1.019,59,0.891,62,0.39,64,1.999,93,1.019,99,1.184,101,1.019,102,1.019,103,0.629,104,0.72,106,1.287,109,1.216,112,1.162,113,1.287,114,1.287,115,0.891,132,1.627,133,3.453,134,1.932,135,3.392,136,3.938,137,4.282,138,2.396,139,2.396,140,3.392,141,1.216,142,1.216,143,3.392,144,2.396,145,3.392,146,3.938,147,4.282,148,2.396,149,2.396,150,2.396,151,4.282,152,2.396,153,2.396,154,2.396,155,2.396,156,2.396,157,4.825,158,2.396,159,4.519,160,3.392,161,3.392,162,3.392,163,3.392,164,3.392,165,2.735,166,2.396,167,2.396,168,2.396,169,2.396,170,2.396,171,2.396,172,2.396]],["title/interfaces/Monitor.html",[50,1.069,173,1.218]],["body/interfaces/Monitor.html",[7,0.05,12,0.6,13,0.6,14,0.503,15,0.247,46,0.742,48,0.04,49,0.04,50,1.397,52,1.818,54,0.327,55,1.332,61,1.803,62,0.51,83,1.818,85,2.091,86,0.941,88,1.728,173,2.138,174,2.432,175,5.026,176,1.961,177,2.888,178,2.888,179,3.582]],["title/controllers/MonitorController.html",[20,1.6,91,0.625]],["body/controllers/MonitorController.html",[6,1.141,7,0.051,12,0.391,13,0.391,14,0.327,15,0.309,18,0.91,20,1.943,24,1.111,26,0.613,29,1.037,30,0.91,35,1.362,46,0.391,47,0.391,48,0.03,49,0.03,54,0.213,59,1.111,61,1.141,62,0.487,86,0.874,91,0.759,93,1,96,3.165,97,1.88,99,1.272,101,1.272,102,1.272,103,1.111,104,1.272,105,1.362,106,1,107,1.184,108,1.362,109,1.184,112,0.799,113,1,114,1,115,1.019,120,1.943,122,1.037,123,1.943,126,1.584,130,2.26,173,1.88,176,1.298,180,1.881,181,2.684,182,3.328,183,2.684,184,3.328,185,2.333,186,3.328,187,2.333,188,2.333,189,3.328,190,2.333,191,2.333,192,3.328,193,2.333,194,2.333,195,3.328,196,2.333,197,1.584,198,2.333,199,1.584,200,2.333,201,2.333,202,2.333,203,1.584,204,2.333,205,1.881,206,2.333,207,2.333,208,1.881,209,2.333,210,1.881,211,2.333,212,2.333,213,2.333,214,2.333,215,2.333]],["title/controllers/SystemController.html",[23,1.6,91,0.625]],["body/controllers/SystemController.html",[6,1.331,7,0.051,8,1.496,12,0.489,13,0.489,14,0.41,15,0.302,18,1.139,23,2.267,24,1.222,26,0.766,29,1.297,30,1.139,33,1.331,34,1.703,35,1.703,41,1.981,46,0.489,47,0.65,48,0.035,49,0.035,54,0.267,91,0.886,93,1.312,97,1.726,99,1.167,103,1.02,104,1.399,106,1.167,107,1.481,112,1,113,1.399,114,1.399,115,0.766,199,1.981,216,2.353,217,3.16,218,4.654,219,3.884,220,2.918,221,2.918,222,2.918,223,2.918,224,2.918,225,2.918,226,2.918,227,2.918,228,2.918,229,2.918,230,2.918,231,2.918,232,2.353,233,2.353,234,2.353,235,2.353,236,2.918,237,2.918]],["title/controllers/TestSessionController.html",[19,1.6,91,0.625]],["body/controllers/TestSessionController.html",[6,1.288,7,0.051,12,0.465,13,0.465,14,0.39,15,0.294,18,1.083,19,2.193,24,1.198,26,0.729,29,1.234,30,1.661,35,1.621,46,0.465,47,0.465,48,0.034,49,0.034,54,0.254,59,0.729,62,0.32,86,0.729,91,0.857,93,1.129,96,2.868,97,1.67,99,1.129,101,0.835,102,0.835,103,0.987,104,1.129,105,1.621,106,1.129,107,1.41,108,1.621,109,1.41,112,0.952,113,1.129,114,1.129,115,0.987,120,1.621,122,1.234,123,1.621,199,1.886,203,1.886,238,2.485,239,2.24,240,3.679,241,3.757,242,3.757,243,2.551,244,2.777,245,2.891,246,2.777,247,3.757,248,4.258,249,2.777,250,2.777,251,2.24,252,2.24,253,3.03,254,2.24,255,2.777,256,2.777,257,2.777,258,2.777,259,2.777,260,2.777,261,2.777]],["title/injectables/TestSessionService.html",[6,0.939,262,1.392]],["body/injectables/TestSessionService.html",[6,0.692,7,0.052,12,0.205,13,0.205,14,0.172,15,0.316,24,0.787,26,0.321,29,0.543,30,1.787,33,1.225,34,0.714,46,0.205,47,0.205,48,0.018,49,0.018,54,0.112,55,0.607,59,0.939,61,1.647,62,0.486,63,0.621,64,1.814,71,1.92,86,0.872,88,1.475,93,0.607,99,1.355,101,1.074,102,1.074,103,1.077,104,1.302,106,0.901,112,0.692,113,1.414,114,0.901,115,0.531,122,0.543,141,1.31,142,1.31,173,2.064,176,0.477,183,2.082,217,2.035,232,0.986,233,0.986,234,0.986,235,0.986,238,2.673,240,2.417,243,1.753,245,3.194,251,0.986,252,0.986,253,0.986,254,0.986,262,1.026,263,0.83,264,0.83,265,2.581,266,2.02,267,2.02,268,2.02,269,2.02,270,2.417,271,2.997,272,2.02,273,0.986,274,1.223,275,2.02,276,1.223,277,2.02,278,1.223,279,2.882,280,2.02,281,1.223,282,2.02,283,1.223,284,2.02,285,1.223,286,1.223,287,1.223,288,1.223,289,2.02,290,1.223,291,1.629,292,2.02,293,1.223,294,1.372,295,1.223,296,1.223,297,1.223,298,0.83,299,2.882,300,1.629,301,0.986,302,1.629,303,1.629,304,1.629,305,0.986,306,0.986,307,1.223,308,3.781,309,1.223,310,1.223,311,1.223,312,1.223,313,0.83,314,1.223,315,1.223,316,2.997,317,1.223,318,1.223,319,1.223,320,2.997,321,1.223,322,1.223,323,1.223,324,1.223,325,1.223,326,1.223,327,1.223,328,1.223,329,1.223,330,0.986,331,1.223,332,1.223,333,1.223,334,1.223,335,1.223,336,2.02,337,1.223,338,0.986,339,1.223,340,2.02,341,1.372,342,1.223,343,0.986,344,1.223,345,1.223,346,2.02,347,2.02,348,1.223,349,2.02,350,1.223,351,1.223,352,1.223,353,1.223,354,1.223,355,1.223,356,1.223,357,1.223,358,1.223,359,1.223,360,1.223,361,1.223]],["title/interfaces/Testee.html",[50,1.069,362,1.218]],["body/interfaces/Testee.html",[7,0.05,12,0.58,13,0.58,14,0.487,15,0.24,46,0.727,48,0.04,49,0.04,50,1.353,52,1.76,54,0.317,55,1.305,61,1.789,62,0.545,63,2.406,83,1.76,85,2.024,86,0.911,88,1.694,176,1.938,178,2.796,313,3.373,362,2.106,363,2.354,364,4.007,365,2.796,366,3.467]],["title/controllers/TesteeController.html",[22,1.6,91,0.625]],["body/controllers/TesteeController.html",[7,0.051,8,1.385,12,0.421,13,0.421,14,0.353,15,0.302,18,0.98,22,2.047,24,1.149,26,0.66,46,0.421,47,0.421,48,0.032,49,0.032,54,0.23,59,1.061,62,0.465,86,0.66,91,0.8,93,1.054,96,3.132,97,1.796,99,1.215,101,1.215,102,1.215,103,1.061,104,1.314,105,1.467,106,1.054,107,1.276,108,1.467,109,1.276,112,0.861,113,1.054,114,1.054,115,1.061,120,2.047,122,1.117,123,2.047,126,1.706,130,2.381,176,1.368,203,1.706,205,2.026,208,2.026,210,2.026,362,1.943,367,2.026,368,3.508,369,2.829,370,3.508,371,2.513,372,3.508,373,2.513,374,2.513,375,3.508,376,2.513,377,2.513,378,3.508,379,2.513,380,2.513,381,1.706,382,2.026,383,2.513,384,2.513,385,2.513,386,2.513,387,2.513,388,2.513,389,2.513,390,2.513,391,2.513,392,2.513]],["title/injectables/TesteeService.html",[8,0.939,262,1.392]],["body/injectables/TesteeService.html",[7,0.052,8,0.948,12,0.304,13,0.304,14,0.255,15,0.329,24,0.984,26,0.477,33,1.457,34,1.06,46,0.304,47,0.304,48,0.025,49,0.025,51,1.889,54,0.166,55,0.832,59,1.06,61,1.561,62,0.509,63,1.702,64,0.922,71,1.405,86,0.727,88,1.08,93,0.832,99,1.403,101,1.213,102,1.213,103,1.116,104,1.431,106,1.127,112,0.948,113,1.369,114,1.127,115,0.727,127,2.703,141,1.405,142,1.405,176,0.709,217,2.545,262,1.405,263,1.233,273,1.465,294,1.233,306,1.465,313,1.233,338,1.465,341,1.233,362,2.115,364,2.703,369,2.703,382,1.465,393,1.465,394,2.767,395,2.767,396,3.748,397,2.767,398,2.767,399,2.703,400,3.748,401,1.816,402,2.767,403,1.816,404,2.767,405,1.816,406,1.816,407,1.816,408,2.767,409,1.816,410,3.352,411,2.767,412,1.816,413,2.767,414,1.816,415,1.816,416,1.816,417,1.816,418,1.816,419,1.816,420,3.352,421,1.816,422,2.767,423,2.767,424,1.816,425,1.816,426,2.767,427,2.767,428,2.767,429,1.816,430,1.816,431,1.816,432,1.816,433,1.816,434,1.816,435,1.816,436,1.816,437,1.816,438,1.816,439,1.465,440,1.816]],["title/classes/WebsocketGateway.html",[33,0.939,47,0.459]],["body/classes/WebsocketGateway.html",[7,0.052,12,0.243,13,0.243,14,0.204,15,0.33,24,1.068,26,0.381,33,1.137,46,0.243,47,0.243,48,0.021,49,0.021,52,0.737,54,0.133,55,0.698,59,0.953,61,1.617,62,0.514,63,1.685,64,1.474,71,1.179,83,0.737,86,0.872,88,0.906,93,0.698,97,1.032,99,1.418,101,1.091,102,1.091,103,1.109,104,1.343,106,0.997,113,1.454,114,0.873,115,1.017,122,1.475,132,0.986,141,1.685,142,1.685,165,3.278,176,1.416,181,2.342,270,2.676,291,1.873,294,0.986,330,1.171,341,1.577,399,1.171,441,0.986,442,2.323,443,2.904,444,2.904,445,2.904,446,2.904,447,3.871,448,2.323,449,3.318,450,2.323,451,3.318,452,2.323,453,2.323,454,2.323,455,3.629,456,2.323,457,1.452,458,1.452,459,2.323,460,1.452,461,2.323,462,1.452,463,2.904,464,1.452,465,2.323,466,3.629,467,2.676,468,1.452,469,1.452,470,2.323,471,1.452,472,1.452,473,1.452,474,3.629,475,2.323,476,4.782,477,3.318,478,1.452,479,2.323,480,1.452,481,1.452,482,2.323,483,1.452,484,1.452,485,1.452,486,1.452,487,1.452,488,1.452,489,1.452,490,1.452,491,1.452,492,1.171,493,1.452,494,1.452,495,1.452,496,1.452,497,1.171,498,1.452,499,3.318,500,2.323,501,2.323,502,1.452,503,3.318,504,2.323,505,1.452,506,1.452,507,1.452,508,1.452,509,1.452,510,1.452,511,1.452,512,2.323,513,1.452,514,1.452,515,1.452,516,1.452,517,1.452,518,1.452,519,1.452,520,1.452,521,1.452]],["title/coverage.html",[522,3.003]],["body/coverage.html",[6,0.896,7,0.05,8,0.896,14,0.367,15,0.377,19,1.526,20,1.526,21,1.526,22,1.526,23,1.526,30,1.61,33,0.896,36,1.526,47,0.603,48,0.033,49,0.033,50,1.61,51,1.161,53,2.408,62,0.301,65,1.774,83,2.369,91,1.065,92,2.108,110,1.774,115,0.686,133,2.108,134,2.108,173,1.161,174,2.447,180,2.108,197,1.774,216,2.108,238,2.408,239,2.108,262,1.83,264,2.447,298,1.774,343,4.399,362,1.161,363,2.447,367,2.108,381,1.774,393,2.108,441,2.447,522,2.108,523,2.614,524,2.614,525,2.614,526,2.614,527,3.605,528,4.943,529,3.605,530,4.126,531,3.605,532,2.108,533,2.108,534,2.108,535,4.126,536,2.614,537,2.614,538,2.614]],["title/miscellaneous/functions.html",[539,1.021,540,2.655]],["body/miscellaneous/functions.html",[7,0.049,15,0.372,48,0.038,49,0.038,51,1.458,53,1.915,54,0.3,59,1.279,61,1.437,62,0.56,84,2.646,85,2.697,101,1.464,102,1.464,103,1.214,110,2.847,173,1.458,174,2.228,177,2.646,197,2.847,362,1.458,363,2.228,365,2.646,381,2.847,441,2.228,492,2.646,532,3.381,533,2.646,534,3.726,539,1.458,540,2.646,541,3.281,542,3.281,543,2.646,544,3.281,545,3.281,546,3.281]],["title/index.html",[54,0.25,547,2.21]],["body/index.html",[0,2.573,1,3.113,3,3.699,4,3.057,5,3.057,6,1.69,7,0.047,8,1.69,9,3.699,10,3.057,11,3.057,18,1.479,48,0.042,49,0.042,52,1.924,132,2.573,263,2.573,497,3.057,547,3.057,548,3.79,549,4.586,550,3.79]],["title/modules.html",[2,2.528]],["body/modules.html",[1,2.471,2,2.874,7,0.045,48,0.045,49,0.045,551,4.234,552,4.234,553,4.234,554,4.234]],["title/properties.html",[55,0.989,555,2.297]],["body/properties.html",[7,0.049,48,0.044,49,0.044,55,1.246,556,4.144,557,4.144,558,4.144,559,4.144,560,4.144,561,4.144,562,4.144]],["title/miscellaneous/typealiases.html",[539,1.021,563,3.292]],["body/miscellaneous/typealiases.html",[7,0.047,15,0.332,29,1.818,48,0.044,49,0.044,54,0.374,62,0.471,243,2.778,439,3.3,467,3.871,539,1.818,564,4.092,565,4.092,566,4.092]],["title/miscellaneous/variables.html",[539,1.021,567,2.655]],["body/miscellaneous/variables.html",[7,0.051,15,0.338,30,1.297,48,0.039,49,0.039,53,1.941,54,0.304,62,0.383,65,2.871,66,2.682,67,2.682,68,2.682,69,2.682,70,2.682,86,0.873,141,2.147,142,2.147,238,1.941,245,3.157,264,2.871,279,3.41,298,2.871,299,3.41,300,3.41,301,2.682,302,3.41,303,3.41,304,3.41,305,2.682,539,1.478,543,2.682,567,2.682,568,3.326]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":343,"title":{},"body":{"injectables/TestSessionService.html":{},"coverage.html":{}}}],["0/1",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":497,"title":{},"body":{"classes/WebsocketGateway.html":{},"index.html":{}}}],["13.0.0",{"_index":557,"title":{},"body":{"properties.html":{}}}],["2",{"_index":549,"title":{},"body":{"index.html":{}}}],["3",{"_index":550,"title":{},"body":{"index.html":{}}}],["400",{"_index":123,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["5",{"_index":548,"title":{},"body":{"index.html":{}}}],["500",{"_index":171,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["a.indexof(v",{"_index":352,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["addmonitor",{"_index":266,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["addmonitor(monitor",{"_index":275,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["addsessionchange",{"_index":267,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["addsessionchange(sessionchange",{"_index":277,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["addtestee",{"_index":394,"title":{},"body":{"injectables/TesteeService.html":{}}}],["addtestee(testee",{"_index":402,"title":{},"body":{"injectables/TesteeService.html":{}}}],["aliases",{"_index":564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allmonitors",{"_index":347,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["alltestsessions",{"_index":356,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["alltestsessions.concat(object.values(grouptestsessions",{"_index":358,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["already",{"_index":321,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["app_filter",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["applysessionchange",{"_index":268,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["applysessionchange(sessionchange",{"_index":280,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["arg",{"_index":85,"title":{},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"interfaces/Testee.html":{},"miscellaneous/functions.html":{}}}],["arg.arguments",{"_index":90,"title":{},"body":{"interfaces/Command.html":{}}}],["arg.groups",{"_index":179,"title":{},"body":{"interfaces/Monitor.html":{}}}],["arg.id",{"_index":89,"title":{},"body":{"interfaces/Command.html":{}}}],["arg.keyword",{"_index":87,"title":{},"body":{"interfaces/Command.html":{}}}],["arg.testid",{"_index":366,"title":{},"body":{"interfaces/Testee.html":{}}}],["arg.token",{"_index":178,"title":{},"body":{"interfaces/Monitor.html":{},"interfaces/Testee.html":{}}}],["arguments",{"_index":56,"title":{},"body":{"interfaces/Command.html":{}}}],["argumentshost",{"_index":147,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["arr",{"_index":493,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["arr[arr.length",{"_index":496,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["array.isarray(request.body.testids",{"_index":125,"title":{},"body":{"controllers/CommandController.html":{}}}],["baseexceptionfilter",{"_index":136,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["behaviorsubject",{"_index":455,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["behaviorsubject(0",{"_index":459,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["behaviorsubject(null",{"_index":456,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["berlin/testcenter",{"_index":562,"title":{},"body":{"properties.html":{}}}],["body",{"_index":208,"title":{},"body":{"controllers/MonitorController.html":{},"controllers/TesteeController.html":{}}}],["bootstrap",{"_index":534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["broadcastcommandtotestees",{"_index":395,"title":{},"body":{"injectables/TesteeService.html":{}}}],["broadcastcommandtotestees(command",{"_index":404,"title":{},"body":{"injectables/TesteeService.html":{}}}],["broadcasting",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["broadcastingevent",{"_index":467,"title":{},"body":{"classes/WebsocketGateway.html":{},"miscellaneous/typealiases.html":{}}}],["broadcasttestsessionstogroupmonitors",{"_index":269,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["broadcasttestsessionstogroupmonitors(groupname",{"_index":282,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["broadcasttoregistered",{"_index":448,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["broadcasttoregistered(tokens",{"_index":465,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["browse",{"_index":554,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":551,"title":{},"body":{"modules.html":{}}}],["catch",{"_index":137,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["catch(exception",{"_index":145,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["change",{"_index":248,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["change.interface",{"_index":254,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{}}}],["class",{"_index":47,"title":{"classes/ErrorHandler.html":{},"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["classes",{"_index":132,"title":{},"body":{"classes/ErrorHandler.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["clean",{"_index":217,"title":{},"body":{"controllers/SystemController.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}}}],["client",{"_index":476,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["client.count",{"_index":520,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["clientlost",{"_index":445,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["clients",{"_index":181,"title":{},"body":{"controllers/MonitorController.html":{},"classes/WebsocketGateway.html":{}}}],["clients(@req",{"_index":214,"title":{},"body":{"controllers/MonitorController.html":{}}}],["clients(request",{"_index":185,"title":{},"body":{"controllers/MonitorController.html":{}}}],["clientscount",{"_index":446,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["command",{"_index":51,"title":{"interfaces/Command.html":{}},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"injectables/TesteeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["command.interface",{"_index":111,"title":{},"body":{"controllers/CommandController.html":{}}}],["command/command.controller",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["command/command.interface",{"_index":416,"title":{},"body":{"injectables/TesteeService.html":{}}}],["commandcontroller",{"_index":21,"title":{"controllers/CommandController.html":{}},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"coverage.html":{}}}],["commandkeywords",{"_index":65,"title":{},"body":{"interfaces/Command.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["commandkeywords)[number",{"_index":72,"title":{},"body":{"interfaces/Command.html":{}}}],["commands",{"_index":439,"title":{},"body":{"injectables/TesteeService.html":{},"miscellaneous/typealiases.html":{}}}],["common/error",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["common/interfaces/test",{"_index":252,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{}}}],["common/websocket.gateway",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/SystemController.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}}}],["concat(object.values(groupmonitors",{"_index":350,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["connected",{"_index":502,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["connection",{"_index":426,"title":{},"body":{"injectables/TesteeService.html":{}}}],["const",{"_index":64,"title":{},"body":{"interfaces/Command.html":{},"classes/ErrorHandler.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{}}}],["constructor(eventsgateway",{"_index":138,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["constructor(websocketgateway",{"_index":273,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}}}],["contenttype('text",{"_index":169,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["controller",{"_index":91,"title":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{},"coverage.html":{}}}],["controllers",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{},"index.html":{}}}],["count",{"_index":521,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["coverage",{"_index":522,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["ctx",{"_index":154,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["ctx.getresponse",{"_index":156,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["data",{"_index":122,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"classes/WebsocketGateway.html":{}}}],["dataservice",{"_index":199,"title":{},"body":{"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{}}}],["debug",{"_index":70,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":97,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{},"classes/WebsocketGateway.html":{}}}],["default",{"_index":141,"title":{},"body":{"classes/ErrorHandler.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":99,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["delete",{"_index":341,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["disable",{"_index":233,"title":{},"body":{"controllers/SystemController.html":{},"injectables/TestSessionService.html":{}}}],["disconnectall",{"_index":449,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnectclient",{"_index":450,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnectclient(monitortoken",{"_index":470,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnected",{"_index":506,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnectedtoken",{"_index":503,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnectnotificationuri",{"_index":364,"title":{},"body":{"interfaces/Testee.html":{},"injectables/TesteeService.html":{}}}],["documentation",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["e",{"_index":495,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["each",{"_index":74,"title":{},"body":{"interfaces/Command.html":{}}}],["error",{"_index":429,"title":{},"body":{"injectables/TesteeService.html":{}}}],["error.message",{"_index":432,"title":{},"body":{"injectables/TesteeService.html":{}}}],["errorhandler",{"_index":36,"title":{"classes/ErrorHandler.html":{}},"body":{"modules/AppModule.html":{},"classes/ErrorHandler.html":{},"coverage.html":{}}}],["eslint",{"_index":232,"title":{},"body":{"controllers/SystemController.html":{},"injectables/TestSessionService.html":{}}}],["even",{"_index":80,"title":{},"body":{"interfaces/Command.html":{}}}],["event",{"_index":466,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["eventsgateway",{"_index":140,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["exception",{"_index":149,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["exception.message",{"_index":166,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["exception.status",{"_index":159,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["export",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["express",{"_index":109,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["extends",{"_index":135,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["filter((v",{"_index":351,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["filter(testee",{"_index":435,"title":{},"body":{"injectables/TesteeService.html":{}}}],["first",{"_index":315,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["formally",{"_index":326,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["function",{"_index":83,"title":{},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"interfaces/Testee.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["functions",{"_index":540,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":349,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["get('')@httpcode(200",{"_index":221,"title":{},"body":{"controllers/SystemController.html":{}}}],["get('/clients",{"_index":186,"title":{},"body":{"controllers/MonitorController.html":{}}}],["get('/monitors",{"_index":192,"title":{},"body":{"controllers/MonitorController.html":{}}}],["get('/test",{"_index":242,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["get('/testees",{"_index":375,"title":{},"body":{"controllers/TesteeController.html":{}}}],["getclienttokens",{"_index":270,"title":{},"body":{"injectables/TestSessionService.html":{},"classes/WebsocketGateway.html":{}}}],["getdisconnectionobservable",{"_index":451,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["getlasturlpart",{"_index":532,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getlasturlpart(message.url",{"_index":498,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["getlasturlpart(url",{"_index":492,"title":{},"body":{"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["getmonitors",{"_index":271,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["gettestees",{"_index":396,"title":{},"body":{"injectables/TesteeService.html":{}}}],["gettestsessions",{"_index":240,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{}}}],["given",{"_index":128,"title":{},"body":{"controllers/CommandController.html":{}}}],["goto",{"_index":67,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/variables.html":{}}}],["group",{"_index":308,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["groupmonitors",{"_index":348,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["groupname",{"_index":284,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["groups",{"_index":175,"title":{},"body":{"interfaces/Monitor.html":{}}}],["grouptestsessions",{"_index":357,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["handleconnection",{"_index":452,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handleconnection(client",{"_index":475,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect",{"_index":453,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect(client",{"_index":479,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handler",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["handler.ts",{"_index":134,"title":{},"body":{"classes/ErrorHandler.html":{},"coverage.html":{}}}],["handler.ts:17",{"_index":144,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["handler.ts:19",{"_index":148,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["handler.ts:9",{"_index":139,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["hence",{"_index":318,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["host",{"_index":146,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["host.switchtohttp",{"_index":155,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["http",{"_index":399,"title":{},"body":{"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["httpcode",{"_index":223,"title":{},"body":{"controllers/SystemController.html":{}}}],["httpcode(200",{"_index":231,"title":{},"body":{"controllers/SystemController.html":{}}}],["httpexception",{"_index":105,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["httpexception('invalid",{"_index":121,"title":{},"body":{"controllers/CommandController.html":{}}}],["httpexception('no",{"_index":126,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TesteeController.html":{}}}],["httpexception('not",{"_index":203,"title":{},"body":{"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["httpmodule",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/iqb",{"_index":561,"title":{},"body":{"properties.html":{}}}],["httpservice",{"_index":400,"title":{},"body":{"injectables/TesteeService.html":{}}}],["httpstatus",{"_index":150,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.bad_request",{"_index":164,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.expectation_failed",{"_index":163,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.internal_server_error",{"_index":158,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.not_acceptable",{"_index":162,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.not_found",{"_index":160,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["httpstatus.service_unavailable",{"_index":161,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["id",{"_index":57,"title":{},"body":{"interfaces/Command.html":{}}}],["identifier",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":442,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["incomingmessage",{"_index":477,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["index",{"_index":54,"title":{"index.html":{}},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["injectable",{"_index":262,"title":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"coverage.html":{}}}],["injectables",{"_index":263,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"index.html":{}}}],["interface",{"_index":50,"title":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"interfaces/Testee.html":{}},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"interfaces/Testee.html":{},"coverage.html":{}}}],["interfaces",{"_index":52,"title":{},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"interfaces/Testee.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["iscommand",{"_index":110,"title":{},"body":{"controllers/CommandController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["iscommand(arg",{"_index":84,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/functions.html":{}}}],["iscommand(request.body.command",{"_index":119,"title":{},"body":{"controllers/CommandController.html":{}}}],["ismonitor",{"_index":197,"title":{},"body":{"controllers/MonitorController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ismonitor(arg",{"_index":177,"title":{},"body":{"interfaces/Monitor.html":{},"miscellaneous/functions.html":{}}}],["ismonitor(request.body",{"_index":202,"title":{},"body":{"controllers/MonitorController.html":{}}}],["issessionchange",{"_index":250,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["issessionchange(request.body",{"_index":257,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["istestee",{"_index":381,"title":{},"body":{"controllers/TesteeController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["istestee(arg",{"_index":365,"title":{},"body":{"interfaces/Testee.html":{},"miscellaneous/functions.html":{}}}],["istestee(request.body",{"_index":385,"title":{},"body":{"controllers/TesteeController.html":{}}}],["json.stringify",{"_index":508,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["json.stringify(request.body",{"_index":259,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["keyword",{"_index":58,"title":{},"body":{"interfaces/Command.html":{}}}],["known",{"_index":322,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["len",{"_index":355,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["license",{"_index":558,"title":{},"body":{"properties.html":{}}}],["line",{"_index":235,"title":{},"body":{"controllers/SystemController.html":{},"injectables/TestSessionService.html":{}}}],["literal",{"_index":294,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["logger",{"_index":106,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["logger(commandcontroller.name",{"_index":116,"title":{},"body":{"controllers/CommandController.html":{}}}],["logger(errorhandler.name",{"_index":143,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["logger(monitorcontroller.name",{"_index":200,"title":{},"body":{"controllers/MonitorController.html":{}}}],["logger(systemcontroller.name",{"_index":225,"title":{},"body":{"controllers/SystemController.html":{}}}],["logger(testeecontroller.name",{"_index":383,"title":{},"body":{"controllers/TesteeController.html":{}}}],["logger(testeeservice.name",{"_index":413,"title":{},"body":{"injectables/TesteeService.html":{}}}],["logger(testsessioncontroller.name",{"_index":255,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["logger(testsessionservice.name",{"_index":292,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["logger(websocketgateway.name",{"_index":461,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["lost",{"_index":427,"title":{},"body":{"injectables/TesteeService.html":{}}}],["make",{"_index":75,"title":{},"body":{"interfaces/Command.html":{}}}],["map",{"_index":489,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["map(testee",{"_index":437,"title":{},"body":{"injectables/TesteeService.html":{}}}],["matching",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":354,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["mergesessionchanges",{"_index":298,"title":{},"body":{"injectables/TestSessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mergesessionchanges(testsession",{"_index":325,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["message",{"_index":165,"title":{},"body":{"classes/ErrorHandler.html":{},"classes/WebsocketGateway.html":{}}}],["messagebody",{"_index":484,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["methods",{"_index":93,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["miscellaneous",{"_index":539,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":559,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":82,"title":{},"body":{"interfaces/Command.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["monitor",{"_index":173,"title":{"interfaces/Monitor.html":{}},"body":{"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"injectables/TestSessionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["monitor.groups.foreach((group",{"_index":335,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["monitor.interface",{"_index":198,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitor/monitor.controller",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["monitor/monitor.interface",{"_index":297,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["monitorcontroller",{"_index":20,"title":{"controllers/MonitorController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MonitorController.html":{},"coverage.html":{}}}],["monitored",{"_index":319,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["monitorregister",{"_index":182,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitorregister(@req",{"_index":201,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitorregister(request",{"_index":188,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitors",{"_index":183,"title":{},"body":{"controllers/MonitorController.html":{},"injectables/TestSessionService.html":{}}}],["monitors(@req",{"_index":212,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitors(request",{"_index":191,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitortoken",{"_index":291,"title":{},"body":{"injectables/TestSessionService.html":{},"classes/WebsocketGateway.html":{}}}],["monitorunregister",{"_index":184,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitorunregister(@req",{"_index":207,"title":{},"body":{"controllers/MonitorController.html":{}}}],["monitorunregister(request",{"_index":194,"title":{},"body":{"controllers/MonitorController.html":{}}}],["name",{"_index":102,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["needs",{"_index":323,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["nestjs/core",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"classes/ErrorHandler.html":{}}}],["nestjs/websockets",{"_index":487,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["new",{"_index":115,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["next",{"_index":234,"title":{},"body":{"controllers/SystemController.html":{},"injectables/TestSessionService.html":{}}}],["notifydisconnection",{"_index":397,"title":{},"body":{"injectables/TesteeService.html":{}}}],["notifydisconnection(testeetoken",{"_index":408,"title":{},"body":{"injectables/TesteeService.html":{}}}],["number",{"_index":63,"title":{},"body":{"interfaces/Command.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["object.keys(this.clients",{"_index":517,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["object.keys(this.clients).foreach((token",{"_index":504,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["object.keys(this.monitors).foreach((group",{"_index":339,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["object.keys(this.monitors[group]).length",{"_index":342,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["object.keys(this.monitors[groupname",{"_index":331,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["object.values(this.monitors",{"_index":345,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["object.values(this.testees",{"_index":422,"title":{},"body":{"injectables/TesteeService.html":{}}}],["object.values(this.testsessions",{"_index":353,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["object.values(this.testsessions[groupname",{"_index":333,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["observable",{"_index":474,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["once",{"_index":79,"title":{},"body":{"interfaces/Command.html":{}}}],["one",{"_index":77,"title":{},"body":{"interfaces/Command.html":{}}}],["ongatewayconnection",{"_index":443,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["ongatewaydisconnect",{"_index":444,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["optional",{"_index":59,"title":{},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["overview",{"_index":547,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":555,"title":{"properties.html":{}},"body":{}}],["parameters",{"_index":101,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["pause",{"_index":66,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":507,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["performed",{"_index":78,"title":{},"body":{"interfaces/Command.html":{}}}],["polling",{"_index":81,"title":{},"body":{"interfaces/Command.html":{}}}],["post",{"_index":107,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["post('/command",{"_index":98,"title":{},"body":{"controllers/CommandController.html":{}}}],["post('/monitor/register",{"_index":189,"title":{},"body":{"controllers/MonitorController.html":{}}}],["post('/monitor/unregister",{"_index":195,"title":{},"body":{"controllers/MonitorController.html":{}}}],["post('/push/session",{"_index":247,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["post('/system/clean",{"_index":219,"title":{},"body":{"controllers/SystemController.html":{}}}],["post('/testee/register",{"_index":372,"title":{},"body":{"controllers/TesteeController.html":{}}}],["post('/testee/unregister",{"_index":378,"title":{},"body":{"controllers/TesteeController.html":{}}}],["postcommand",{"_index":94,"title":{},"body":{"controllers/CommandController.html":{}}}],["postcommand(@req",{"_index":117,"title":{},"body":{"controllers/CommandController.html":{}}}],["postcommand(request",{"_index":95,"title":{},"body":{"controllers/CommandController.html":{}}}],["private",{"_index":113,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["properties",{"_index":55,"title":{"properties.html":{}},"body":{"interfaces/Command.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"properties.html":{}}}],["provide",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["pushsessionchange",{"_index":241,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["pushsessionchange(@req",{"_index":256,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["pushsessionchange(request",{"_index":246,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["readonly",{"_index":114,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["reduce",{"_index":346,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["registered:${json.stringify(request.body",{"_index":205,"title":{},"body":{"controllers/MonitorController.html":{},"controllers/TesteeController.html":{}}}],["removemonitor",{"_index":272,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["removemonitor(monitortoken",{"_index":289,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["removetestee",{"_index":398,"title":{},"body":{"injectables/TesteeService.html":{}}}],["removetestee(testeetoken",{"_index":411,"title":{},"body":{"injectables/TesteeService.html":{}}}],["repository",{"_index":560,"title":{},"body":{"properties.html":{}}}],["req",{"_index":108,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["request",{"_index":96,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["request.body",{"_index":130,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TesteeController.html":{}}}],["request.body.command",{"_index":118,"title":{},"body":{"controllers/CommandController.html":{}}}],["request.body.testids",{"_index":124,"title":{},"body":{"controllers/CommandController.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["response",{"_index":151,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["results",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resume",{"_index":69,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":86,"title":{},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":103,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":218,"title":{},"body":{"controllers/SystemController.html":{}}}],["rxjs",{"_index":488,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["rxjs/operators",{"_index":490,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["send",{"_index":431,"title":{},"body":{"injectables/TesteeService.html":{}}}],["send(message",{"_index":170,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["server",{"_index":447,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/.../command.interface.ts",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["service/.../interfaces.ts",{"_index":565,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["service/.../main.ts",{"_index":541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service/.../monitor.interface.ts",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service/.../test",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service/.../testee.interface.ts",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service/.../websocket.gateway.ts",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service/src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["service/src/command/command.controller.ts",{"_index":92,"title":{},"body":{"controllers/CommandController.html":{},"coverage.html":{}}}],["service/src/command/command.controller.ts:17",{"_index":100,"title":{},"body":{"controllers/CommandController.html":{}}}],["service/src/command/command.interface.ts",{"_index":53,"title":{},"body":{"interfaces/Command.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["service/src/common/error",{"_index":133,"title":{},"body":{"classes/ErrorHandler.html":{},"coverage.html":{}}}],["service/src/common/interfaces.ts",{"_index":566,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["service/src/common/websocket.gateway.ts",{"_index":441,"title":{},"body":{"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["service/src/common/websocket.gateway.ts:22",{"_index":462,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:25",{"_index":464,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:27",{"_index":458,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:28",{"_index":460,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:29",{"_index":457,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:31",{"_index":478,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:39",{"_index":480,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:55",{"_index":468,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:66",{"_index":471,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:74",{"_index":469,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:80",{"_index":473,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:84",{"_index":472,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/common/websocket.gateway.ts:89",{"_index":483,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["service/src/main.ts",{"_index":533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["service/src/monitor/monitor.controller.ts",{"_index":180,"title":{},"body":{"controllers/MonitorController.html":{},"coverage.html":{}}}],["service/src/monitor/monitor.controller.ts:17",{"_index":190,"title":{},"body":{"controllers/MonitorController.html":{}}}],["service/src/monitor/monitor.controller.ts:27",{"_index":196,"title":{},"body":{"controllers/MonitorController.html":{}}}],["service/src/monitor/monitor.controller.ts:37",{"_index":193,"title":{},"body":{"controllers/MonitorController.html":{}}}],["service/src/monitor/monitor.controller.ts:42",{"_index":187,"title":{},"body":{"controllers/MonitorController.html":{}}}],["service/src/monitor/monitor.interface.ts",{"_index":174,"title":{},"body":{"interfaces/Monitor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["service/src/system/system.controller.ts",{"_index":216,"title":{},"body":{"controllers/SystemController.html":{},"coverage.html":{}}}],["service/src/system/system.controller.ts:19",{"_index":220,"title":{},"body":{"controllers/SystemController.html":{}}}],["service/src/system/system.controller.ts:29",{"_index":222,"title":{},"body":{"controllers/SystemController.html":{}}}],["service/src/test",{"_index":238,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["service/src/testee/testee.controller.ts",{"_index":367,"title":{},"body":{"controllers/TesteeController.html":{},"coverage.html":{}}}],["service/src/testee/testee.controller.ts:18",{"_index":373,"title":{},"body":{"controllers/TesteeController.html":{}}}],["service/src/testee/testee.controller.ts:28",{"_index":379,"title":{},"body":{"controllers/TesteeController.html":{}}}],["service/src/testee/testee.controller.ts:38",{"_index":376,"title":{},"body":{"controllers/TesteeController.html":{}}}],["service/src/testee/testee.interface.ts",{"_index":363,"title":{},"body":{"interfaces/Testee.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["service/src/testee/testee.service.ts",{"_index":393,"title":{},"body":{"injectables/TesteeService.html":{},"coverage.html":{}}}],["service/src/testee/testee.service.ts:18",{"_index":414,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:20",{"_index":415,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:22",{"_index":403,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:26",{"_index":412,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:36",{"_index":407,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:40",{"_index":409,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:57",{"_index":405,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:69",{"_index":406,"title":{},"body":{"injectables/TesteeService.html":{}}}],["service/src/testee/testee.service.ts:7",{"_index":401,"title":{},"body":{"injectables/TesteeService.html":{}}}],["session",{"_index":253,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{}}}],["session.controller",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["session.controller.ts",{"_index":239,"title":{},"body":{"controllers/TestSessionController.html":{},"coverage.html":{}}}],["session.controller.ts:17",{"_index":249,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["session.controller.ts:27",{"_index":244,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["session.service",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{}}}],["session.service.ts",{"_index":264,"title":{},"body":{"injectables/TestSessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session.service.ts:105",{"_index":287,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:114",{"_index":288,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:122",{"_index":286,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:126",{"_index":285,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:18",{"_index":274,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:27",{"_index":293,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:29",{"_index":296,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:35",{"_index":295,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:41",{"_index":281,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:46",{"_index":278,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:66",{"_index":283,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:77",{"_index":276,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session.service.ts:89",{"_index":290,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["session/test",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionchange",{"_index":279,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["sessionchange.groupname",{"_index":312,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["sessionchange.testid",{"_index":314,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["sessionchange.teststate",{"_index":304,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["sessionchange.unitname",{"_index":300,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["sessionchange.unitstate",{"_index":303,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["sessionid",{"_index":309,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["sessions",{"_index":243,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"miscellaneous/typealiases.html":{}}}],["signal",{"_index":428,"title":{},"body":{"injectables/TesteeService.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["statements",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":157,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["status(status",{"_index":168,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["string",{"_index":61,"title":{},"body":{"interfaces/Command.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/functions.html":{}}}],["subscribeclientcount",{"_index":454,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribeclientcount(@messagebody",{"_index":518,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribeclientcount(data",{"_index":481,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage",{"_index":485,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage('subscribe:client.count",{"_index":482,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["super",{"_index":153,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["support",{"_index":552,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":76,"title":{},"body":{"interfaces/Command.html":{}}}],["svg",{"_index":553,"title":{},"body":{"modules.html":{}}}],["system",{"_index":227,"title":{},"body":{"controllers/SystemController.html":{}}}],["system/system.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["systemcontroller",{"_index":23,"title":{"controllers/SystemController.html":{}},"body":{"modules/AppModule.html":{},"controllers/SystemController.html":{},"coverage.html":{}}}],["table",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["terminate",{"_index":68,"title":{},"body":{"interfaces/Command.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"miscellaneous/typealiases.html":{}}}],["testcenter",{"_index":251,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{}}}],["testee",{"_index":362,"title":{"interfaces/Testee.html":{}},"body":{"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["testee.interface",{"_index":382,"title":{},"body":{"controllers/TesteeController.html":{},"injectables/TesteeService.html":{}}}],["testee.service",{"_index":380,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testee.testid",{"_index":436,"title":{},"body":{"injectables/TesteeService.html":{}}}],["testee.token",{"_index":438,"title":{},"body":{"injectables/TesteeService.html":{}}}],["testee/testee.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["testee/testee.service",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"controllers/SystemController.html":{}}}],["testeecontroller",{"_index":22,"title":{"controllers/TesteeController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TesteeController.html":{},"coverage.html":{}}}],["testeeregister",{"_index":368,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testeeregister(@req",{"_index":384,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testeeregister(request",{"_index":371,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testees",{"_index":369,"title":{},"body":{"controllers/TesteeController.html":{},"injectables/TesteeService.html":{}}}],["testees(@req",{"_index":391,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testees(request",{"_index":374,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testeeservice",{"_index":8,"title":{"injectables/TesteeService.html":{}},"body":{"modules/AppModule.html":{},"controllers/CommandController.html":{},"controllers/SystemController.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"coverage.html":{},"index.html":{}}}],["testeetoken",{"_index":410,"title":{},"body":{"injectables/TesteeService.html":{}}}],["testeeunregister",{"_index":370,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testeeunregister(@req",{"_index":388,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testeeunregister(request",{"_index":377,"title":{},"body":{"controllers/TesteeController.html":{}}}],["testid",{"_index":313,"title":{},"body":{"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"injectables/TesteeService.html":{}}}],["testids",{"_index":127,"title":{},"body":{"controllers/CommandController.html":{},"injectables/TesteeService.html":{}}}],["testids.foreach((testid",{"_index":433,"title":{},"body":{"injectables/TesteeService.html":{}}}],["testsession",{"_index":299,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["testsession.teststate",{"_index":305,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["testsession.unitname",{"_index":301,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["testsession.unitstate",{"_index":302,"title":{},"body":{"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["testsessionchange",{"_index":245,"title":{},"body":{"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"miscellaneous/variables.html":{}}}],["testsessioncontroller",{"_index":19,"title":{"controllers/TestSessionController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TestSessionController.html":{},"coverage.html":{}}}],["testsessions",{"_index":265,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["testsessionservice",{"_index":6,"title":{"injectables/TestSessionService.html":{}},"body":{"modules/AppModule.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"coverage.html":{},"index.html":{}}}],["this.addsessionchange(sessionchange",{"_index":310,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.broadcasttestsessionstogroupmonitors(sessionchange.groupname",{"_index":311,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.clientlost$.asobservable",{"_index":516,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clientlost$.next(disconnectedtoken",{"_index":505,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clients[monitortoken",{"_index":512,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clients[monitortoken].close",{"_index":514,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clients[token",{"_index":499,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clients[token].send(payload",{"_index":511,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clientscount$.next(object.values(this.clients).length",{"_index":500,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.clientscount$.pipe(map((count",{"_index":519,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.dataservice.addmonitor(request.body",{"_index":206,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.dataservice.applysessionchange(request.body",{"_index":260,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["this.dataservice.clean",{"_index":229,"title":{},"body":{"controllers/SystemController.html":{}}}],["this.dataservice.getclienttokens",{"_index":215,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.dataservice.getmonitors",{"_index":213,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.dataservice.gettestsessions",{"_index":261,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["this.dataservice.removemonitor(request.body.token",{"_index":211,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.disconnectclient(token",{"_index":515,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.eventsgateway.disconnectall",{"_index":172,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["this.http.post(this.testees[testeetoken].disconnectnotificationuri).subscribe",{"_index":424,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.logger.error(`(${status",{"_index":167,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["this.logger.log(\"broadcasting",{"_index":329,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.logger.log(\"skipping",{"_index":317,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.logger.log('/command",{"_index":129,"title":{},"body":{"controllers/CommandController.html":{}}}],["this.logger.log('/push/session",{"_index":258,"title":{},"body":{"controllers/TestSessionController.html":{}}}],["this.logger.log('monitor",{"_index":209,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.logger.log('ping",{"_index":237,"title":{},"body":{"controllers/SystemController.html":{}}}],["this.logger.log('testee",{"_index":389,"title":{},"body":{"controllers/TesteeController.html":{}}}],["this.logger.log(`client",{"_index":501,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.logger.log(`disconnect",{"_index":513,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.logger.log(`monitor",{"_index":204,"title":{},"body":{"controllers/MonitorController.html":{}}}],["this.logger.log(`remove",{"_index":338,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}}}],["this.logger.log(`sending",{"_index":510,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.logger.log(`sent",{"_index":425,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.logger.log(`testee",{"_index":386,"title":{},"body":{"controllers/TesteeController.html":{}}}],["this.logger.warn('clean",{"_index":226,"title":{},"body":{"controllers/SystemController.html":{}}}],["this.logger.warn(`could",{"_index":430,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.monitors",{"_index":360,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.monitors[group",{"_index":336,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.monitors[group][monitor.token",{"_index":337,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.monitors[group][monitortoken",{"_index":340,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.monitors[groupname",{"_index":328,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.notifydisconnection(disconnected",{"_index":417,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.removemonitor(disconnected",{"_index":307,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.removetestee(disconnected",{"_index":418,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.testees",{"_index":440,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.testees[testee.token",{"_index":419,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.testees[testeetoken",{"_index":420,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.testees[testeetoken].disconnectnotificationuri",{"_index":423,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.testeeservice.addtestee(request.body",{"_index":387,"title":{},"body":{"controllers/TesteeController.html":{}}}],["this.testeeservice.broadcastcommandtotestees(request.body.command",{"_index":131,"title":{},"body":{"controllers/CommandController.html":{}}}],["this.testeeservice.clean",{"_index":230,"title":{},"body":{"controllers/SystemController.html":{}}}],["this.testeeservice.gettestees",{"_index":392,"title":{},"body":{"controllers/TesteeController.html":{}}}],["this.testeeservice.removetestee(request.body.token",{"_index":390,"title":{},"body":{"controllers/TesteeController.html":{}}}],["this.testsessions",{"_index":361,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.testsessions[group",{"_index":316,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.testsessions[group][testid",{"_index":320,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.testsessions[groupname",{"_index":332,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.websocketgateway.broadcasttoregistered",{"_index":434,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.websocketgateway.broadcasttoregistered(tokens",{"_index":334,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.websocketgateway.disconnectclient(monitortoken",{"_index":344,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.websocketgateway.disconnectclient(testeetoken",{"_index":421,"title":{},"body":{"injectables/TesteeService.html":{}}}],["this.websocketgateway.getclienttokens",{"_index":359,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["this.websocketgateway.getdisconnectionobservable().subscribe((disconnected",{"_index":306,"title":{},"body":{"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{}}}],["this.wsgateway.disconnectall",{"_index":228,"title":{},"body":{"controllers/SystemController.html":{}}}],["throw",{"_index":120,"title":{},"body":{"controllers/CommandController.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"controllers/TesteeController.html":{}}}],["timestamp",{"_index":60,"title":{},"body":{"interfaces/Command.html":{}}}],["token",{"_index":176,"title":{},"body":{"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["tokens",{"_index":330,"title":{},"body":{"injectables/TestSessionService.html":{},"classes/WebsocketGateway.html":{}}}],["tokens.foreach((token",{"_index":509,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["type",{"_index":62,"title":{},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"interfaces/Monitor.html":{},"controllers/MonitorController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":563,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":71,"title":{},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["undefined",{"_index":88,"title":{},"body":{"interfaces/Command.html":{},"controllers/CommandController.html":{},"interfaces/Monitor.html":{},"injectables/TestSessionService.html":{},"interfaces/Testee.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["unique",{"_index":73,"title":{},"body":{"interfaces/Command.html":{}}}],["unknown",{"_index":327,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["unregistered",{"_index":210,"title":{},"body":{"controllers/MonitorController.html":{},"controllers/TesteeController.html":{}}}],["updated",{"_index":324,"title":{},"body":{"injectables/TestSessionService.html":{}}}],["url",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url.split('/').filter(e",{"_index":494,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["use",{"_index":236,"title":{},"body":{"controllers/SystemController.html":{}}}],["useclass",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":142,"title":{},"body":{"classes/ErrorHandler.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":567,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":556,"title":{},"body":{"properties.html":{}}}],["void",{"_index":104,"title":{},"body":{"controllers/CommandController.html":{},"classes/ErrorHandler.html":{},"controllers/MonitorController.html":{},"controllers/SystemController.html":{},"controllers/TestSessionController.html":{},"injectables/TestSessionService.html":{},"controllers/TesteeController.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{}}}],["websocket.gateway",{"_index":152,"title":{},"body":{"classes/ErrorHandler.html":{}}}],["websocketgateway",{"_index":33,"title":{"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/ErrorHandler.html":{},"controllers/SystemController.html":{},"injectables/TestSessionService.html":{},"injectables/TesteeService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["websocketserver",{"_index":463,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["ws",{"_index":491,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["wsgateway",{"_index":224,"title":{},"body":{"controllers/SystemController.html":{}}}],["wsresponse",{"_index":486,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTestSessionService\n\nTestSessionService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTestSessionService->AppModule\n\n\n\n\n\nTesteeService\n\nTesteeService\n\nAppModule -->\n\nTesteeService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            broadcasting-service/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TestSessionService\n                        \n                        \n                            TesteeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TestSessionController\n                        \n                        \n                            MonitorController\n                        \n                        \n                            CommandController\n                        \n                        \n                            TesteeController\n                        \n                        \n                            SystemController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule, Module } from '@nestjs/common';\nimport { APP_FILTER } from '@nestjs/core';\nimport { TestSessionController } from './test-session/test-session.controller';\nimport { MonitorController } from './monitor/monitor.controller';\nimport { WebsocketGateway } from './common/websocket.gateway';\nimport { TestSessionService } from './test-session/test-session.service';\nimport { ErrorHandler } from './common/error-handler';\nimport { CommandController } from './command/command.controller';\nimport { TesteeController } from './testee/testee.controller';\nimport { TesteeService } from './testee/testee.service';\nimport { SystemController } from './system/system.controller';\n\n@Module({\n  controllers: [\n    TestSessionController,\n    MonitorController,\n    CommandController,\n    TesteeController,\n    SystemController\n  ],\n  providers: [\n    WebsocketGateway,\n    TestSessionService,\n    TesteeService,\n    {\n      provide: APP_FILTER,\n      useClass: ErrorHandler\n    }\n  ],\n  imports: [\n    HttpModule\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Command.html":{"url":"interfaces/Command.html","title":"interface - Command","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Command\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/command/command.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            arguments\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            keyword\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        arguments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        arguments:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyword:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const commandKeywords = [\n  'pause',\n  'goto',\n  'terminate',\n  'resume',\n  'debug'\n];\n\nexport interface Command {\n  keyword: (typeof commandKeywords)[number];\n  id: string; // a unique id for each command, to make sure each one get only performed once (even in polling mode)\n  arguments: string[];\n  timestamp?: number;\n}\n\nexport function isCommand(arg: any): arg is Command {\n  return (arg.keyword !== undefined) && (arg.id !== undefined) && (arg.arguments !== undefined);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommandController.html":{"url":"controllers/CommandController.html","title":"controller - CommandController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommandController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/command/command.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                postCommand\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        postCommand\n                        \n                    \n                \n            \n            \n                \npostCommand(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/command')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/command/command.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, HttpException, Logger, Post, Req\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { isCommand } from './command.interface';\nimport { TesteeService } from '../testee/testee.service';\n\n@Controller()\nexport class CommandController {\n  constructor(\n    private readonly testeeService: TesteeService\n  ) {}\n\n  private readonly logger = new Logger(CommandController.name);\n\n  @Post('/command')\n  postCommand(@Req() request: Request): void {\n    if ((typeof request.body.command === 'undefined') || !isCommand(request.body.command)) {\n      throw new HttpException('invalid command data', 400);\n    }\n\n    if ((typeof request.body.testIds === 'undefined') || !Array.isArray(request.body.testIds)) {\n      throw new HttpException('no testIds given', 400);\n    }\n\n    this.logger.log('/command', request.body);\n\n    this.testeeService.broadcastCommandToTestees(request.body.command, request.body.testIds);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorHandler.html":{"url":"classes/ErrorHandler.html","title":"class - ErrorHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/common/error-handler.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsGateway: WebsocketGateway)\n                    \n                \n                        \n                            \n                                Defined in broadcasting-service/src/common/error-handler.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsGateway\n                                                  \n                                                        \n                                                                        WebsocketGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ErrorHandler.name)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/error-handler.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/error-handler.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch, ArgumentsHost, HttpStatus, Logger\n} from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Response } from 'express';\nimport { WebsocketGateway } from './websocket.gateway';\n\n@Catch()\nexport class ErrorHandler extends BaseExceptionFilter {\n\n  constructor(\n    private readonly eventsGateway: WebsocketGateway\n  ) {\n    super();\n  }\n\n  private readonly logger = new Logger(ErrorHandler.name);\n\n  catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response: Response = ctx.getResponse();\n\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception.status === HttpStatus.NOT_FOUND) {\n      status = HttpStatus.NOT_FOUND;\n    }\n\n    if (exception.status === HttpStatus.SERVICE_UNAVAILABLE) {\n      status = HttpStatus.SERVICE_UNAVAILABLE;\n    }\n\n    if (exception.status === HttpStatus.NOT_ACCEPTABLE) {\n      status = HttpStatus.NOT_ACCEPTABLE;\n    }\n\n    if (exception.status === HttpStatus.EXPECTATION_FAILED) {\n      status = HttpStatus.EXPECTATION_FAILED;\n    }\n\n    if (exception.status === HttpStatus.BAD_REQUEST) {\n      status = HttpStatus.BAD_REQUEST;\n    }\n\n    const message = exception.message;\n\n    this.logger.error(`(${status}) ${message}`);\n\n    response\n      .status(status)\n      .contentType('text')\n      .send(message);\n\n    if (status >= 500) {\n      this.eventsGateway.disconnectAll();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Monitor.html":{"url":"interfaces/Monitor.html","title":"interface - Monitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Monitor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/monitor/monitor.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            groups\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        groups\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groups:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Monitor {\n  token: string;\n  groups: string[]\n}\n\nexport function isMonitor(arg: any): arg is Monitor {\n  return (arg.token !== undefined) && (arg.groups !== undefined);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MonitorController.html":{"url":"controllers/MonitorController.html","title":"controller - MonitorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MonitorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/monitor/monitor.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clients\n                            \n                            \n                                monitorRegister\n                            \n                            \n                                monitors\n                            \n                            \n                                monitorUnregister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clients\n                        \n                    \n                \n            \n            \n                \nclients(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/clients')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/monitor/monitor.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        monitorRegister\n                        \n                    \n                \n            \n            \n                \nmonitorRegister(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/monitor/register')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/monitor/monitor.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        monitors\n                        \n                    \n                \n            \n            \n                \nmonitors(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/monitors')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/monitor/monitor.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Monitor[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        monitorUnregister\n                        \n                    \n                \n            \n            \n                \nmonitorUnregister(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/monitor/unregister')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/monitor/monitor.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, Get, HttpException, Logger, Post, Req\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { isMonitor, Monitor } from './monitor.interface';\nimport { TestSessionService } from '../test-session/test-session.service';\n\n@Controller()\nexport class MonitorController {\n  constructor(\n    private readonly dataService: TestSessionService\n  ) {}\n\n  private readonly logger = new Logger(MonitorController.name);\n\n  @Post('/monitor/register')\n  monitorRegister(@Req() request: Request): void {\n    if (!isMonitor(request.body)) {\n      throw new HttpException('not monitor data', 400);\n    }\n\n    this.logger.log(`monitor registered:${JSON.stringify(request.body)}`);\n    this.dataService.addMonitor(request.body);\n  }\n\n  @Post('/monitor/unregister')\n  monitorUnregister(@Req() request: Request): void {\n    if (!('token' in request.body)) {\n      throw new HttpException('no token in body', 400);\n    }\n\n    this.logger.log('monitor unregistered:', request.body);\n    this.dataService.removeMonitor(request.body.token);\n  }\n\n  @Get('/monitors')\n  monitors(@Req() request: Request): Monitor[] {\n    return this.dataService.getMonitors();\n  }\n\n  @Get('/clients')\n  clients(@Req() request: Request): string[] {\n    return this.dataService.getClientTokens();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SystemController.html":{"url":"controllers/SystemController.html","title":"controller - SystemController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SystemController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/system/system.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clean\n                            \n                            \n                                root\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clean\n                        \n                    \n                \n            \n            \n                \nclean()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/system/clean')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/system/system.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        root\n                        \n                    \n                \n            \n            \n                \nroot()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/system/system.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, Post, Logger, Get, HttpCode\n} from '@nestjs/common';\nimport { TestSessionService } from '../test-session/test-session.service';\nimport { TesteeService } from '../testee/testee.service';\nimport { WebsocketGateway } from '../common/websocket.gateway';\n\n@Controller()\nexport class SystemController {\n  constructor(\n    private readonly dataService: TestSessionService,\n    private readonly testeeService: TesteeService,\n    private readonly wsGateway: WebsocketGateway\n  ) {}\n\n  private readonly logger = new Logger(SystemController.name);\n\n  @Post('/system/clean')\n  clean(): void {\n    this.logger.warn('clean system');\n    this.wsGateway.disconnectAll();\n    this.dataService.clean();\n    this.testeeService.clean();\n  }\n\n  @Get('')\n  @HttpCode(200)\n  // eslint-disable-next-line class-methods-use-this\n  root(): void {\n    this.logger.log('ping');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestSessionController.html":{"url":"controllers/TestSessionController.html","title":"controller - TestSessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestSessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/test-session/test-session.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTestSessions\n                            \n                            \n                                pushSessionChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getTestSessions\n                        \n                    \n                \n            \n            \n                \ngetTestSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/test-sessions')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TestSessionChange[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushSessionChange\n                        \n                    \n                \n            \n            \n                \npushSessionChange(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/push/session-change')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, Get, HttpException, Logger, Post, Req\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { isSessionChange, TestSessionChange } from 'testcenter-common/interfaces/test-session-change.interface';\nimport { TestSessionService } from './test-session.service';\n\n@Controller()\nexport class TestSessionController {\n  constructor(\n    private readonly dataService: TestSessionService\n  ) {}\n\n  private readonly logger = new Logger(TestSessionController.name);\n\n  @Post('/push/session-change')\n  pushSessionChange(@Req() request: Request): void {\n    if (!isSessionChange(request.body)) {\n      throw new HttpException('not session data', 400);\n    }\n\n    this.logger.log('/push/session-change', JSON.stringify(request.body));\n    this.dataService.applySessionChange(request.body);\n  }\n\n  @Get('/test-sessions')\n  getTestSessions(): TestSessionChange[] {\n    return this.dataService.getTestSessions();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TestSessionService.html":{"url":"injectables/TestSessionService.html","title":"injectable - TestSessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TestSessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/test-session/test-session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                monitors\n                            \n                            \n                                    Private\n                                testSessions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMonitor\n                            \n                            \n                                    Private\n                                addSessionChange\n                            \n                            \n                                applySessionChange\n                            \n                            \n                                    Private\n                                broadcastTestSessionsToGroupMonitors\n                            \n                            \n                                clean\n                            \n                            \n                                getClientTokens\n                            \n                            \n                                getMonitors\n                            \n                            \n                                getTestSessions\n                            \n                            \n                                removeMonitor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(websocketGateway: WebsocketGateway)\n                    \n                \n                        \n                            \n                                Defined in broadcasting-service/src/test-session/test-session.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        websocketGateway\n                                                  \n                                                        \n                                                                        WebsocketGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMonitor\n                        \n                    \n                \n            \n            \n                \naddMonitor(monitor: Monitor)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                Monitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addSessionChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSessionChange(sessionChange: TestSessionChange)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionChange\n                                    \n                                            TestSessionChange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        applySessionChange\n                        \n                    \n                \n            \n            \n                \napplySessionChange(sessionChange: TestSessionChange)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sessionChange\n                                    \n                                            TestSessionChange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        broadcastTestSessionsToGroupMonitors\n                        \n                    \n                \n            \n            \n                \n                    \n                    broadcastTestSessionsToGroupMonitors(groupName: string)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clean\n                        \n                    \n                \n            \n            \n                \nclean()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientTokens\n                        \n                    \n                \n            \n            \n                \ngetClientTokens()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMonitors\n                        \n                    \n                \n            \n            \n                \ngetMonitors()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Monitor[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTestSessions\n                        \n                    \n                \n            \n            \n                \ngetTestSessions()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TestSessionChange[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeMonitor\n                        \n                    \n                \n            \n            \n                \nremoveMonitor(monitorToken: string)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/test-session/test-session.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitorToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TestSessionService.name)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/test-session/test-session.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        monitors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/test-session/test-session.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testSessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/test-session/test-session.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { TestSessionChange } from 'testcenter-common/interfaces/test-session-change.interface';\nimport { Monitor } from '../monitor/monitor.interface';\nimport { WebsocketGateway } from '../common/websocket.gateway';\n\nconst mergeSessionChanges = (testSession: TestSessionChange, sessionChange: TestSessionChange): TestSessionChange => {\n  if ((sessionChange.unitName) && (sessionChange.unitName !== testSession.unitName)) {\n    testSession.unitState = {};\n  }\n\n  sessionChange.unitState = { ...testSession.unitState, ...sessionChange.unitState };\n  sessionChange.testState = { ...testSession.testState, ...sessionChange.testState };\n\n  return { ...testSession, ...sessionChange };\n};\n\n@Injectable()\nexport class TestSessionService {\n  constructor(\n    private readonly websocketGateway: WebsocketGateway\n  ) {\n    this.websocketGateway.getDisconnectionObservable().subscribe((disconnected: string) => {\n      this.removeMonitor(disconnected);\n    });\n  }\n\n  private readonly logger = new Logger(TestSessionService.name);\n\n  private testSessions: {\n    [group: string]: {\n      [sessionId: string]: TestSessionChange\n    }\n  } = {};\n\n  private monitors: {\n    [group: string]: {\n      [token: string]: Monitor\n    }\n  } = {};\n\n  applySessionChange(sessionChange: TestSessionChange): void {\n    this.addSessionChange(sessionChange);\n    this.broadcastTestSessionsToGroupMonitors(sessionChange.groupName);\n  }\n\n  private addSessionChange(sessionChange: TestSessionChange): void {\n    const group: string = sessionChange.groupName;\n    const testId = sessionChange.testId;\n\n    // testSession is first of group\n    if (typeof this.testSessions[group] === 'undefined') {\n      // this.logger.log(\"skipping group hence not monitored: \" + group);\n      return;\n    }\n\n    if (typeof this.testSessions[group][testId] !== 'undefined') {\n      // testSession is already known and needs to be updated\n      const testSession = this.testSessions[group][testId];\n      this.testSessions[group][testId] = mergeSessionChanges(testSession, sessionChange);\n    } else {\n      // formally unknown testSession\n      this.testSessions[group][testId] = sessionChange;\n    }\n  }\n\n  private broadcastTestSessionsToGroupMonitors(groupName: string) {\n    if (typeof this.monitors[groupName] !== 'undefined') {\n      // this.logger.log(\"broadcasting data about group: \" + groupName);\n      const tokens = Object.keys(this.monitors[groupName]);\n      const sessions = (typeof this.testSessions[groupName] !== 'undefined') ?\n        Object.values(this.testSessions[groupName]) :\n        [];\n      this.websocketGateway.broadcastToRegistered(tokens, 'test-sessions', sessions);\n    }\n  }\n\n  addMonitor(monitor: Monitor): void {\n    monitor.groups.forEach((group: string) => {\n      if (typeof this.monitors[group] === 'undefined') {\n        this.monitors[group] = {};\n      }\n      if (typeof this.testSessions[group] === 'undefined') {\n        this.testSessions[group] = {};\n      }\n      this.monitors[group][monitor.token] = monitor;\n    });\n  }\n\n  removeMonitor(monitorToken: string): void {\n    this.logger.log(`remove monitor: ${monitorToken}`);\n\n    Object.keys(this.monitors).forEach((group: string) => {\n      if (typeof this.monitors[group][monitorToken] !== 'undefined') {\n        delete this.monitors[group][monitorToken];\n\n        if (Object.keys(this.monitors[group]).length === 0) {\n          delete this.testSessions[group];\n        }\n      }\n    });\n\n    this.websocketGateway.disconnectClient(monitorToken);\n  }\n\n  getMonitors(): Monitor[] {\n    return Object.values(this.monitors)\n      .reduce(\n        (allMonitors: Monitor[], groupMonitors: { [g: string]: Monitor }): Monitor[] => allMonitors\n          .concat(Object.values(groupMonitors)), []\n      )\n      .filter((v: Monitor, i: number, a: Monitor[]) => a.indexOf(v) === i);\n  }\n\n  getTestSessions(): TestSessionChange[] {\n    return Object.values(this.testSessions)\n      .reduce(\n        // eslint-disable-next-line max-len\n        (allTestSessions: TestSessionChange[], groupTestSessions: { [g: string]: TestSessionChange }): TestSessionChange[] => allTestSessions.concat(Object.values(groupTestSessions)), []\n      );\n  }\n\n  getClientTokens(): string[] {\n    return this.websocketGateway.getClientTokens();\n  }\n\n  clean(): void {\n    this.monitors = {};\n    this.testSessions = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Testee.html":{"url":"interfaces/Testee.html","title":"interface - Testee","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Testee\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/testee/testee.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            disconnectNotificationUri\n                                        \n                                \n                                \n                                        \n                                            testId\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disconnectNotificationUri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disconnectNotificationUri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Testee {\n  token: string;\n  testId: number;\n  disconnectNotificationUri: string;\n}\n\nexport function isTestee(arg: any): arg is Testee {\n  return (arg.token !== undefined) && (arg.testId !== undefined);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TesteeController.html":{"url":"controllers/TesteeController.html","title":"controller - TesteeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TesteeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/testee/testee.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                testeeRegister\n                            \n                            \n                                testees\n                            \n                            \n                                testeeUnregister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        testeeRegister\n                        \n                    \n                \n            \n            \n                \ntesteeRegister(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/testee/register')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testees\n                        \n                    \n                \n            \n            \n                \ntestees(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testees')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Testee[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testeeUnregister\n                        \n                    \n                \n            \n            \n                \ntesteeUnregister(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/testee/unregister')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, Get, HttpException, Logger, Post, Req\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { TesteeService } from './testee.service';\nimport { isTestee, Testee } from './testee.interface';\n\n@Controller()\nexport class TesteeController {\n  constructor(\n    private readonly testeeService: TesteeService\n  ) {\n  }\n\n  private readonly logger = new Logger(TesteeController.name);\n\n  @Post('/testee/register')\n  testeeRegister(@Req() request: Request): void {\n    if (!isTestee(request.body)) {\n      throw new HttpException('not testee data', 400);\n    }\n\n    this.logger.log(`testee registered:${JSON.stringify(request.body)}`);\n    this.testeeService.addTestee(request.body);\n  }\n\n  @Post('/testee/unregister')\n  testeeUnregister(@Req() request: Request): void {\n    if (!('token' in request.body)) {\n      throw new HttpException('no token in body', 400);\n    }\n\n    this.logger.log('testee unregistered:', request.body);\n    this.testeeService.removeTestee(request.body.token);\n  }\n\n  @Get('/testees')\n  testees(@Req() request: Request): Testee[] {\n    return this.testeeService.getTestees();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TesteeService.html":{"url":"injectables/TesteeService.html","title":"injectable - TesteeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TesteeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/testee/testee.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                testees\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addTestee\n                            \n                            \n                                broadcastCommandToTestees\n                            \n                            \n                                clean\n                            \n                            \n                                getTestees\n                            \n                            \n                                notifyDisconnection\n                            \n                            \n                                removeTestee\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(websocketGateway: WebsocketGateway, http: HttpService)\n                    \n                \n                        \n                            \n                                Defined in broadcasting-service/src/testee/testee.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        websocketGateway\n                                                  \n                                                        \n                                                                        WebsocketGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addTestee\n                        \n                    \n                \n            \n            \n                \naddTestee(testee: Testee)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    testee\n                                    \n                                                Testee\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastCommandToTestees\n                        \n                    \n                \n            \n            \n                \nbroadcastCommandToTestees(command: Command, testIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                Command\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    testIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clean\n                        \n                    \n                \n            \n            \n                \nclean()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTestees\n                        \n                    \n                \n            \n            \n                \ngetTestees()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Testee[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyDisconnection\n                        \n                    \n                \n            \n            \n                \nnotifyDisconnection(testeeToken: string)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    testeeToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeTestee\n                        \n                    \n                \n            \n            \n                \nremoveTestee(testeeToken: string)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/testee/testee.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    testeeToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TesteeService.name)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/testee/testee.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        testees\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/testee/testee.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpService, Injectable, Logger } from '@nestjs/common';\nimport { Testee } from './testee.interface';\nimport { WebsocketGateway } from '../common/websocket.gateway';\nimport { Command } from '../command/command.interface';\n\n@Injectable()\nexport class TesteeService {\n  constructor(\n    private readonly websocketGateway: WebsocketGateway,\n    private http: HttpService\n  ) {\n    this.websocketGateway.getDisconnectionObservable().subscribe((disconnected: string) => {\n      this.notifyDisconnection(disconnected);\n      this.removeTestee(disconnected);\n    });\n  }\n\n  private readonly logger = new Logger(TesteeService.name);\n\n  private testees: { [token: string]: Testee } = {};\n\n  addTestee(testee: Testee): void {\n    this.testees[testee.token] = testee;\n  }\n\n  removeTestee(testeeToken: string): void {\n    this.logger.log(`remove testee: ${testeeToken}`);\n\n    if (typeof this.testees[testeeToken] !== 'undefined') {\n      delete this.testees[testeeToken];\n    }\n\n    this.websocketGateway.disconnectClient(testeeToken);\n  }\n\n  getTestees(): Testee[] {\n    return Object.values(this.testees);\n  }\n\n  notifyDisconnection(testeeToken: string): void {\n    if (typeof this.testees[testeeToken] === 'undefined') {\n      return;\n    }\n    if (this.testees[testeeToken].disconnectNotificationUri) {\n      const disconnectNotificationUri = this.testees[testeeToken].disconnectNotificationUri;\n      this.http.post(this.testees[testeeToken].disconnectNotificationUri).subscribe(\n        () => {\n          this.logger.log(`sent connection-lost signal to ${disconnectNotificationUri}`);\n        },\n        error => {\n          this.logger.warn(`could not send connection-lost signal to ${disconnectNotificationUri}: ${error.message}`);\n        }\n      );\n    }\n  }\n\n  broadcastCommandToTestees(command: Command, testIds: number[]) : void {\n    testIds.forEach((testId => {\n      this.websocketGateway.broadcastToRegistered(\n        Object.values(this.testees)\n          .filter(testee => testee.testId === testId)\n          .map(testee => testee.token),\n        'commands',\n        [command]\n      );\n    }));\n  }\n\n  clean(): void {\n    this.testees = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketGateway.html":{"url":"classes/WebsocketGateway.html","title":"class - WebsocketGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            broadcasting-service/src/common/websocket.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clientLost$\n                            \n                            \n                                    Private\n                                clients\n                            \n                            \n                                    Private\n                                clientsCount$\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                broadcastToRegistered\n                            \n                            \n                                disconnectAll\n                            \n                            \n                                disconnectClient\n                            \n                            \n                                getClientTokens\n                            \n                            \n                                getDisconnectionObservable\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                subscribeClientCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientLost$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(null)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/websocket.gateway.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/websocket.gateway.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clientsCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/websocket.gateway.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(WebsocketGateway.name)\n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/websocket.gateway.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in broadcasting-service/src/common/websocket.gateway.ts:25\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        broadcastToRegistered\n                        \n                    \n                \n            \n            \n                \nbroadcastToRegistered(tokens: string[], event: BroadcastingEvent, message: any)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                                BroadcastingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnectAll\n                        \n                    \n                \n            \n            \n                \ndisconnectAll()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnectClient\n                        \n                    \n                \n            \n            \n                \ndisconnectClient(monitorToken: string)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitorToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientTokens\n                        \n                    \n                \n            \n            \n                \ngetClientTokens()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDisconnectionObservable\n                        \n                    \n                \n            \n            \n                \ngetDisconnectionObservable()\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Client, message: IncomingMessage)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Client\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Client)\n                \n            \n\n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Client\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscribeClientCount\n                        \n                    \n                \n            \n            \n                \nsubscribeClientCount(data: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('subscribe:client.count')\n                \n            \n\n            \n                \n                    Defined in broadcasting-service/src/common/websocket.gateway.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  MessageBody, OnGatewayConnection, OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsResponse\n} from '@nestjs/websockets';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Server, Client } from 'ws';\nimport { IncomingMessage } from 'http';\nimport { Logger } from '@nestjs/common';\nimport { BroadcastingEvent } from './interfaces';\n\nfunction getLastUrlPart(url: string) {\n  const arr = url.split('/').filter(e => e);\n  return arr[arr.length - 1];\n}\n\n@WebSocketGateway()\nexport class WebsocketGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(WebsocketGateway.name);\n\n  @WebSocketServer()\n  private server: Server;\n\n  private clients: { [token: string] : Client } = {};\n  private clientsCount$: BehaviorSubject = new BehaviorSubject(0);\n  private clientLost$: BehaviorSubject = new BehaviorSubject(null);\n\n  handleConnection(client: Client, message: IncomingMessage): void {\n    const token = getLastUrlPart(message.url);\n\n    this.clients[token] = client;\n    this.clientsCount$.next(Object.values(this.clients).length);\n    this.logger.log(`client connected: ${token}`);\n  }\n\n  handleDisconnect(client: Client): void {\n    let disconnectedToken = '';\n    Object.keys(this.clients).forEach((token: string) => {\n      if (this.clients[token] === client) {\n        delete this.clients[token];\n        disconnectedToken = token;\n      }\n    });\n\n    if (disconnectedToken !== '') {\n      this.clientLost$.next(disconnectedToken);\n      this.clientsCount$.next(Object.values(this.clients).length);\n      this.logger.log(`client disconnected: ${disconnectedToken}`);\n    }\n  }\n\n  broadcastToRegistered(tokens: string[], event: BroadcastingEvent, message: any): void {\n    const payload = JSON.stringify({ event, data: message });\n\n    tokens.forEach((token: string) => {\n      if (typeof this.clients[token] !== 'undefined') {\n        this.logger.log(`sending to client: ${token}`);\n        this.clients[token].send(payload);\n      }\n    });\n  }\n\n  disconnectClient(monitorToken: string): void {\n    if (typeof this.clients[monitorToken] !== 'undefined') {\n      this.logger.log(`disconnect client: ${monitorToken}`);\n      this.clients[monitorToken].close();\n      delete this.clients[monitorToken];\n    }\n  }\n\n  disconnectAll(): void {\n    Object.keys(this.clients).forEach((token: string) => {\n      this.disconnectClient(token);\n    });\n  }\n\n  getDisconnectionObservable(): Observable {\n    return this.clientLost$.asObservable();\n  }\n\n  getClientTokens(): string[] {\n    return Object.keys(this.clients);\n  }\n\n  @SubscribeMessage('subscribe:client.count')\n  subscribeClientCount(@MessageBody() data: number): Observable> {\n    return this.clientsCount$.pipe(map((count: number) => ({ event: 'client.count', data: count })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                broadcasting-service/src/command/command.controller.ts\n            \n            controller\n            CommandController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                broadcasting-service/src/command/command.interface.ts\n            \n            interface\n            Command\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                broadcasting-service/src/command/command.interface.ts\n            \n            function\n            isCommand\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/command/command.interface.ts\n            \n            variable\n            commandKeywords\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/common/error-handler.ts\n            \n            class\n            ErrorHandler\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                broadcasting-service/src/common/websocket.gateway.ts\n            \n            class\n            WebsocketGateway\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                broadcasting-service/src/common/websocket.gateway.ts\n            \n            function\n            getLastUrlPart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/monitor/monitor.controller.ts\n            \n            controller\n            MonitorController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                broadcasting-service/src/monitor/monitor.interface.ts\n            \n            interface\n            Monitor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                broadcasting-service/src/monitor/monitor.interface.ts\n            \n            function\n            isMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/system/system.controller.ts\n            \n            controller\n            SystemController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                broadcasting-service/src/test-session/test-session.controller.ts\n            \n            controller\n            TestSessionController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                broadcasting-service/src/test-session/test-session.service.ts\n            \n            injectable\n            TestSessionService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                broadcasting-service/src/test-session/test-session.service.ts\n            \n            variable\n            mergeSessionChanges\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/testee/testee.controller.ts\n            \n            controller\n            TesteeController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                broadcasting-service/src/testee/testee.interface.ts\n            \n            interface\n            Testee\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                broadcasting-service/src/testee/testee.interface.ts\n            \n            function\n            isTestee\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                broadcasting-service/src/testee/testee.service.ts\n            \n            injectable\n            TesteeService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (broadcasting-service/.../main.ts)\n                        \n                        \n                            getLastUrlPart   (broadcasting-service/.../websocket.gateway.ts)\n                        \n                        \n                            isCommand   (broadcasting-service/.../command.interface.ts)\n                        \n                        \n                            isMonitor   (broadcasting-service/.../monitor.interface.ts)\n                        \n                        \n                            isTestee   (broadcasting-service/.../testee.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    broadcasting-service/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    broadcasting-service/src/common/websocket.gateway.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLastUrlPart\n                        \n                    \n                \n            \n            \n                \ngetLastUrlPart(url: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    broadcasting-service/src/command/command.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCommand\n                        \n                    \n                \n            \n            \n                \nisCommand(arg: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Command\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    broadcasting-service/src/monitor/monitor.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isMonitor\n                        \n                    \n                \n            \n            \n                \nisMonitor(arg: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Monitor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    broadcasting-service/src/testee/testee.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isTestee\n                        \n                    \n                \n            \n            \n                \nisTestee(arg: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Testee\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTestSessionService\n\nTestSessionService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTestSessionService->AppModule\n\n\n\n\n\nTesteeService\n\nTesteeService\n\nAppModule -->\n\nTesteeService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 13.0.0\n        \n            License : MIT\n        \n            Repository : https://github.com/iqb-berlin/testcenter\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BroadcastingEvent   (broadcasting-service/.../interfaces.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    broadcasting-service/src/common/interfaces.ts\n    \n    \n        \n            \n                \n                    \n                    BroadcastingEvent\n                \n            \n            \n                \n                        \"test-sessions\" | \"commands\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            commandKeywords   (broadcasting-service/.../command.interface.ts)\n                        \n                        \n                            mergeSessionChanges   (broadcasting-service/.../test-session.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    broadcasting-service/src/command/command.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commandKeywords\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'pause',\n  'goto',\n  'terminate',\n  'resume',\n  'debug'\n]\n                    \n                \n\n\n        \n    \n\n    broadcasting-service/src/test-session/test-session.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mergeSessionChanges\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (testSession: TestSessionChange, sessionChange: TestSessionChange): TestSessionChange => {\n  if ((sessionChange.unitName) && (sessionChange.unitName !== testSession.unitName)) {\n    testSession.unitState = {};\n  }\n\n  sessionChange.unitState = { ...testSession.unitState, ...sessionChange.unitState };\n  sessionChange.testState = { ...testSession.testState, ...sessionChange.testState };\n\n  return { ...testSession, ...sessionChange };\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
