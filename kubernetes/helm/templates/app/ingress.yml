apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: stripregexfe
  namespace: {{ .Values.namespace }}
spec:
  redirectRegex:
    regex: ^http(s?)://www\.(.*)
    replacement: http${1}://${2}

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: stripregexbe
  namespace: {{ .Values.namespace }}
spec:
  stripPrefix:
    prefixes:
      - "/api"

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: stripregexfs
  namespace: {{ .Values.namespace }}
spec:
  stripPrefix:
      prefixes:
      - "/fs"

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: stripregexbs
  namespace: {{ .Values.namespace }}
spec:
  stripPrefix:
      prefixes:
      - "/bs/public"

---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: securityheaders
  namespace: {{ .Values.namespace }}
spec:
  headers:
    contentTypeNosniff: true
    customFrameOptionsValue: "SAMEORIGIN"
    referrerPolicy: "no-referrer"
    stsIncludeSubdomains: true
    stsSeconds: 31536000

---
# First, define a RedirectScheme middleware
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: https-redirect
  namespace: {{ .Values.namespace }}
spec:
  redirectScheme:
    scheme: https
    port: "{{ .Values.config.tlsPort }}"
    permanent: true

---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ .Chart.Name }}-path-ingress-http
  namespace: {{ .Values.namespace }}
spec:
  entryPoints:
      - web
  routes:
    - match: Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)
      kind: Rule
      middlewares:
        - name: securityheaders
          namespace: {{ .Values.namespace }}
        - name: stripregexfe
          namespace: {{ .Values.namespace }}
        {{- if or (eq (toString .Values.config.tlsEnabled) "true") (eq (toString .Values.config.tlsEnabled) "on") (eq (toString .Values.config.tlsEnabled) "yes")  }}
        - name: https-redirect
          namespace: {{ .Values.namespace }}
        {{- end }}
      services:
        - name: {{ .Chart.Name }}-fe-service
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/api`)
      middlewares:
        - name: stripregexbe
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
        - name: https-redirect
          namespace: {{ .Values.namespace }}
      services:
        - name: {{ .Chart.Name }}-backend-service
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/fs`)
      middlewares:
        - name: stripregexfs
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
        - name: https-redirect
          namespace: {{ .Values.namespace }}
      services:
        - name: testcenter-file-service #hard coded in application as internal address
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/bs/public`)
      middlewares:
        - name: stripregexbs
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
        {{- if or (eq (toString .Values.config.tlsEnabled) "true") (eq (toString .Values.config.tlsEnabled) "on") (eq (toString .Values.config.tlsEnabled) "yes")  }}
        - name: https-redirect
          namespace: {{ .Values.namespace }}
        {{- end }}
      services:
        - name: testcenter-broadcasting-service #hard coded in application as internal address
          port: 3000

{{- if or (eq (toString .Values.config.tlsEnabled) "true") (eq (toString .Values.config.tlsEnabled) "on") (eq (toString .Values.config.tlsEnabled) "yes")  }}
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ .Chart.Name }}-path-ingress-https
  namespace: {{ .Values.namespace }}
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)
      kind: Rule
      middlewares:
        - name: securityheaders
          namespace: {{ .Values.namespace }}
        - name: stripregexfe
          namespace: {{ .Values.namespace }}
        {{- if or (eq (toString .Values.config.tlsEnabled) "true") (eq (toString .Values.config.tlsEnabled) "on") (eq (toString .Values.config.tlsEnabled) "yes")  }}
        - name: https-redirect
          namespace: {{ .Values.namespace }}
        {{- end }}
      services:
        - name: {{ .Chart.Name }}-fe-service
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/api`)
      middlewares:
        - name: stripregexbe
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
      services:
        - name: {{ .Chart.Name }}-backend-service
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/fs`)
      middlewares:
        - name: stripregexfs
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
      services:
        - name: testcenter-file-service #hard coded in application as internal address
          port: 80
    - kind: Rule
      match: (Host(`www.{{ .Values.config.hostname }}`) || Host(`{{ .Values.config.hostname }}`)) && PathPrefix(`/bs/public`)
      middlewares:
        - name: stripregexbs
          namespace: {{ .Values.namespace }}
        - name: securityheaders
          namespace: {{ .Values.namespace }}
      services:
        - name: testcenter-broadcasting-service #hard coded in application as internal address
          port: 3000
  tls: {} #dev-deploy: use this line for self signed certs
#wip for acme
#  tls:
#    certResolver: acme
#    options:
#      name: default
#      namespace: default
{{- end }}