apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-fs-deployment
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.fileService.replicas }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}-fs
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}-fs
    spec:
      containers:
      - name: {{ .Chart.Name }}-fs-container
        image: iqbberlin/testcenter-file-service:{{ .Chart.Version }}
        env:
        - name: CACHE_SERVICE_INCLUDE_FILES
          valueFrom:
            configMapKeyRef:
              name: {{ .Chart.Name }}-config
              key: CACHE_SERVICE_INCLUDE_FILES
        - name: CACHE_SERVICE_ADDRESS_FOR_LUA
          valueFrom:
            configMapKeyRef:
              name: {{ .Chart.Name }}-config
              key: CACHE_SERVICE_ADDRESS_FOR_LUA
        volumeMounts:
        - name: backend-data
          mountPath: /var/www/html/
        - name: nginx-config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf-in-volume
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: testcenter-backend-vo-data
      - name: nginx-config-volume
        configMap:
          name: nginx-fs-config-configmap
          items:
          - key: config.nginx.conf
            path: nginx.conf-in-volume

---
apiVersion: v1
kind: Service
metadata:
  name: testcenter-file-service #hard coded in application as internal address
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Chart.Name }}-fs
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-fs-config-configmap
  namespace: {{ .Values.namespace }}
data:
  config.nginx.conf: |
    load_module modules/ndk_http_module.so;
    load_module modules/ngx_http_lua_module.so;

    worker_processes auto; # The special value auto allows binding worker processes automatically to available CPUs
    worker_cpu_affinity auto; # The optional mask parameter can be used to limit the CPUs available for automatic binding

    env CACHE_SERVICE_INCLUDE_FILES;
    env CACHE_SERVICE_ADDRESS_FOR_LUA;

    events {
      # assuming 1 core for each worker process, setting worker_connections to 1024 implies that Nginx can serve 1024 clients/second.
      worker_connections 1024;
    }

    http {

      access_log /dev/null;
      error_log /dev/stdout;

      tcp_nodelay on; # default = on. off can: help improve network efficiency and reduce congestion, but can introduce some latency
      keepalive_timeout 65;

      server_name_in_redirect off;

      charset utf-8;
      source_charset utf-8;
      include mime.types;
      gzip on;

      resolver kube-dns.kube-system.svc.cluster.local; # DNS resolver for the DNS cache, will be overwritten when building the image

      lua_code_cache off;
      lua_shared_dict dns_cache 12k;
      lua_package_path "/usr/share/nginx/auth/?.lua;;";

      map $http_testmode $root {
        default /var/www/html;
        integration /var/www/data-TEST;
      }

      server {
        server_tokens off; # removes the nginx version at least (removing the server-header at all is very difficult)
        listen 80;
        listen [::]:80;

        location / {
          root $root;
          include /etc/nginx/conf.d/cors.conf; # must be overriden in e2e/headless-context and in future maybe others too
          internal; # forbids direct access to the files without token
        }

        location /file {
          set $file_path '';
          access_by_lua_file auth/auth.lua;
          content_by_lua_file auth/content.lua;
        }

        location /health {
          access_log off;
          add_header 'Content-Type' 'text/plain';
          return 200 "healthy\n";
        }

        error_page 404 /404;
        error_page 403 /403;
        error_page 500 /500;

        location = /404 {
          internal;
          return 404 'File-Service: File or Endpoint not found.';
        }

        location = /403 {
          internal;
          return 404 'File-Service: Forbidden.';
        }

        location = /500 {
          internal;
          return 404 'File-Service: Server Error.';
        }
      }
    }
