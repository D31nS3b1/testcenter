export class BookletConfig {
	// this file is generated by 'generateBookletConfigClass' script from 'app/config/booklet-config.json'
	// do not change anything here directly!

	loading_mode: "LAZY" | "EAGER" = "LAZY";
	logPolicy: "disabled" | "lean" | "rich" | "debug" = "rich";
	pagingMode: "separate" | "concat-scroll" | "concat-scroll-snap" = "separate";
	stateReportPolicy: "none" | "eager" | "on-demand" = "eager";
	page_navibuttons: "OFF" | "MERGED" | "SEPARATE_TOP" | "SEPARATE_BOTTOM" = "SEPARATE_BOTTOM";
	unit_navibuttons: "OFF" | "ARROWS_ONLY" | "FULL" = "FULL";
	unit_menu: "OFF" | "ENABLED_ONLY" | "FULL" = "OFF";
	force_presentation_complete: "OFF" | "ON" = "OFF";
	force_responses_complete: "OFF" | "ON" = "OFF";
	unit_screenheader: "OFF" | "WITH_UNIT_TITLE" | "WITH_BOOKLET_TITLE" | "EMPTY" = "EMPTY";
	unit_title: "OFF" | "ON" = "ON";
	unit_show_time_left: "OFF" | "ON" = "OFF";
	show_end_button_in_player: "OFF" | "ALWAYS" | "ONLY_LAST_UNIT" = "OFF";
	restore_current_page_on_return: "OFF" | "ON" = "OFF";

	public setFromKeyValuePairs(config) {
		if (config) {
			if (config['loading_mode']) { this.loading_mode = config['loading_mode']}
			if (config['logPolicy']) { this.logPolicy = config['logPolicy']}
			if (config['pagingMode']) { this.pagingMode = config['pagingMode']}
			if (config['stateReportPolicy']) { this.stateReportPolicy = config['stateReportPolicy']}
			if (config['page_navibuttons']) { this.page_navibuttons = config['page_navibuttons']}
			if (config['unit_navibuttons']) { this.unit_navibuttons = config['unit_navibuttons']}
			if (config['unit_menu']) { this.unit_menu = config['unit_menu']}
			if (config['force_presentation_complete']) { this.force_presentation_complete = config['force_presentation_complete']}
			if (config['force_responses_complete']) { this.force_responses_complete = config['force_responses_complete']}
			if (config['unit_screenheader']) { this.unit_screenheader = config['unit_screenheader']}
			if (config['unit_title']) { this.unit_title = config['unit_title']}
			if (config['unit_show_time_left']) { this.unit_show_time_left = config['unit_show_time_left']}
			if (config['show_end_button_in_player']) { this.show_end_button_in_player = config['show_end_button_in_player']}
			if (config['restore_current_page_on_return']) { this.restore_current_page_on_return = config['restore_current_page_on_return']}
		}
	}

	public setFromXml(bookletConfigElement: Element) {
		if (bookletConfigElement) {
			const bookletConfigs = Array.prototype.slice.call(bookletConfigElement.childNodes).filter(function (e) { return e.nodeType === 1; });
			for (let childIndex = 0; childIndex < bookletConfigs.length; childIndex++) {
				const configKey = bookletConfigs[childIndex].getAttribute('key');
				const configValue = bookletConfigs[childIndex].textContent;
				switch (configKey) {
					case 'loading_mode':
						this.loading_mode = configValue;
						break;
					case 'logPolicy':
						this.logPolicy = configValue;
						break;
					case 'pagingMode':
						this.pagingMode = configValue;
						break;
					case 'stateReportPolicy':
						this.stateReportPolicy = configValue;
						break;
					case 'page_navibuttons':
						this.page_navibuttons = configValue;
						break;
					case 'unit_navibuttons':
						this.unit_navibuttons = configValue;
						break;
					case 'unit_menu':
						this.unit_menu = configValue;
						break;
					case 'force_presentation_complete':
						this.force_presentation_complete = configValue;
						break;
					case 'force_responses_complete':
						this.force_responses_complete = configValue;
						break;
					case 'unit_screenheader':
						this.unit_screenheader = configValue;
						break;
					case 'unit_title':
						this.unit_title = configValue;
						break;
					case 'unit_show_time_left':
						this.unit_show_time_left = configValue;
						break;
					case 'show_end_button_in_player':
						this.show_end_button_in_player = configValue;
						break;
					case 'restore_current_page_on_return':
						this.restore_current_page_on_return = configValue;
						break;
				}
			}
		}
	}
}
