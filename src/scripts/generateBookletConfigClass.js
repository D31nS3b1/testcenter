// generates booklet-config.ts as class with all data from JSON:

const fs = require("fs");
const definitionFilename = '../app/config/booklet-config.json';
const targetTsFilename = '../app/config/booklet-config.ts';
const mdSourceFilename = '../app/config/booklet-config.md';
const mdTargetFilename = '../../docs/booklet-config.md';

console.log('');
console.log('writing TypeScript');

const definition = JSON.parse(fs.readFileSync(definitionFilename));

let fileContent = "export class BookletConfig {\n";
fileContent += "\t// this file is generated by 'generateBookletConfigClass' script from 'app/config/booklet-config.json'\n";
fileContent += "\t// do not change anything here directly!\n\n";

for (const k of Object.keys(definition)) {
  fileContent += '\t' + k + ': "' + Object.keys(definition[k].options).join('" | "') + '" = "' + definition[k].defaultvalue + '";\n';
}

fileContent += "\n\tpublic setFromKeyValuePairs(config) {\n";
fileContent += "\t\tif (config) {\n";
for (const k of Object.keys(definition)) {
  fileContent += "\t\t\tif (config['" + k + "']) { this." + k + " = config['" + k + "']}\n";
}
fileContent += "\t\t}\n\t}\n";

fileContent += "\n\tpublic setFromXml(bookletConfigElement: Element) {\n";
fileContent += "\t\tif (bookletConfigElement) {\n";
fileContent += "\t\t\tconst bookletConfigs = Array.prototype.slice.call(bookletConfigElement.childNodes).filter(function (e) { return e.nodeType === 1; });\n";
fileContent += "\t\t\tfor (let childIndex = 0; childIndex < bookletConfigs.length; childIndex++) {\n";
fileContent += "\t\t\t\tconst configKey = bookletConfigs[childIndex].getAttribute('key');\n";
fileContent += "\t\t\t\tconst configValue = bookletConfigs[childIndex].textContent;\n";
fileContent += "\t\t\t\tswitch (configKey) {\n";
for (const k of Object.keys(definition)) {
  fileContent += "\t\t\t\t\tcase '" + k + "':\n\t\t\t\t\t\tthis." + k + " = configValue;\n\t\t\t\t\t\tbreak;\n";
}
fileContent += "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n";


fileContent += "}\n";
fs.writeFileSync(targetTsFilename, fileContent, "utf8");

console.log('');
console.log('writing markdown');
let mdContent = fs.readFileSync(mdSourceFilename, 'utf8').toString();
for (const k of Object.keys(definition)) {
  mdContent += '\n####`' + k + '`\n' + definition[k].label + '\n';
  for (const o of Object.keys(definition[k].options)) {
    mdContent += '  * "' + o + ((o === definition[k].defaultvalue) ? '" (default): ' : '": ') + definition[k].options[o] + '\n';
  }
}

fs.writeFileSync(mdTargetFilename, mdContent, "utf8");

console.log('');
console.log('done.');
