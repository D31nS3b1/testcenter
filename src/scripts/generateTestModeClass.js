// generates test-config.ts as class with all data from JSON:

const fs = require("fs");
const definitionOptionsFilename = '../app/config/mode-options.json';
const definitionModesFilename = '../app/config/test-modes.json';
const targetTsFilename = '../app/config/test-mode.ts';
const mdSourceFilename = '../app/config/test-mode.md';
const mdTargetFilename = '../../docs/test-mode.md';

console.log('');
console.log('writing TypeScript');

const definitionOptions = JSON.parse(fs.readFileSync(definitionOptionsFilename));
const definitionModes = JSON.parse(fs.readFileSync(definitionModesFilename));

let fileContent = "// @ts-ignore\n";
fileContent += "import testModes from './test-modes.json';\n\n";
fileContent += "// this file is generated by 'generateTestModeClass' script from 'app/config/test-modes.json' and 'app/config/mode-options.json'\n";
fileContent += "// do not change anything here directly!\n\n";
fileContent += "export class TestMode {\n";

const demoConfig = definitionModes.DEMO.config;

for (const k of Object.keys(definitionOptions)) {
  fileContent += '\t' + k + ': ' + (demoConfig[k] ? 'true' : 'false') + ';\n';
}
fileContent += '\tmodeLabel: "Nur Ansicht (Demo)";\n';

fileContent += "\n\tpublic constructor (loginMode: string = 'DEMO') {\n";
fileContent += "\t\tif (loginMode) {\n";
fileContent += "\t\t\tconst regExPattern = /(" + Object.keys(definitionModes).join('|') + ")/;\n";
fileContent += "\t\t\tif (regExPattern.test(loginMode.toUpperCase())) {\n";
fileContent += "\t\t\t\tconst mode = loginMode.toUpperCase().match(regExPattern)[0];\n";
fileContent += "\t\t\t\tconst modeConfig = testModes[mode];\n";
for (const k of Object.keys(definitionOptions)) {
  fileContent += "\t\t\t\tthis." + k + " = modeConfig.config." + k + ";\n";
}
fileContent += "\t\t\t\tthis.modeLabel = modeConfig.label;\n";

fileContent += "\t\t\t} else {\n";
fileContent += "\t\t\t\tconsole.error('TestConfig: invalid loginMode - take DEMO');\n";
fileContent += "\t\t\t}\n";
fileContent += "\t\t} else {\n";
fileContent += "\t\t\tconsole.error('TestConfig: empty loginMode - take DEMO');\n";
fileContent += "\t\t}\n\t}\n";

fileContent += "}\n";

fs.writeFileSync(targetTsFilename, fileContent, "utf8");

console.log('');
console.log('writing markdown');
let mdContent = fs.readFileSync(mdSourceFilename, 'utf8').toString();

let tableHeader1 = "|  | ";
let tableHeader2 = "| :------------- |";
for (const k of Object.keys(definitionModes)) {
  mdContent += '* `' + k + (k === 'DEMO' ? '` (default): ' : '`: ') + definitionModes[k].label + '\n';
  tableHeader1 += '`' + k + '` | ';
  tableHeader2 += " :-------------: |";
}
mdContent += '\n\n';
mdContent += tableHeader1 + '\n';
mdContent += tableHeader2 + '\n';
for (const ok of Object.keys(definitionOptions)) {
  mdContent += '|' + definitionOptions[ok] + '|';
  for (const k of Object.keys(definitionModes)) {
    mdContent += definitionModes[k].config[ok] ? 'X |' : '  |';
  }
  mdContent += '\n';
}
fs.writeFileSync(mdTargetFilename, mdContent, "utf8");

console.log('');
console.log('done.');
