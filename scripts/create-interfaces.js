/* eslint-disable no-console,import/no-extraneous-dependencies */

/**
 * Some interfaces (in the frontend) are auto-generated
 */

const fs = require('fs');
const gulp = require('gulp');
const cliPrint = require('./helper/cli-print');

const commonDir = fs.realpathSync(`${__dirname}'/../common`);
const definitionsDir = fs.realpathSync(`${__dirname}'/../definitions`);

/**
 * Creates class for booklet-configurations. `frontend/src/app/shared/classes/booklet-config.class.ts`
 *
 * Read more about booklet-configurations in user's manual (german):
 * https://github.com/iqb-berlin/iqb-berlin.github.io/wiki/Booklet%E2%80%90Xml#Konfiguration
 *
 * Primary Source is `definitions/booklet-config.json`.
 * TODO make the primary source be `definitions/vo_booklet.xsd`.
 */
exports.bookletConfigData = done => {
  cliPrint.headline('BookletConfig: Writing interface');

  const definition = JSON.parse(fs.readFileSync(`${definitionsDir}/booklet-config.json`).toString());

  const output = [];

  output.push('// this file is automatically generated. do not change anything here directly!');
  output.push('export class BookletConfigData {');

  Object.keys(definition)
    .forEach(configParameter => {
      const line = `  ${configParameter}: ${
        (definition[configParameter].options && Object.keys(definition[configParameter].options).length)
          ? Object.keys(definition[configParameter].options)
            .map(option => `'${option}'`)
            .join(' | ')
          : 'string'
      } = '${definition[configParameter].defaultvalue}';`;
      output.push(line);
    });

  output.push('}');
  output.push('');

  fs.writeFileSync(`${commonDir}/src/classes/booklet-config-data.class.ts`, output.join('\n'));
  done();
};

/**
 * Creates class for test-modes. `frontend/src/app/shared/classes/test-mode.class.ts`
 *
 * Read more in user's manual (german):
 * https://github.com/iqb-berlin/iqb-berlin.github.io/wiki/Login:-Modi-der-Testdurchf%C3%BChrung
 *
 * Primary Source of test-modes are `definitions/test-mode.json` and `definitions/test-mode.json`.
 * This is also used to generate the docs.
 * TODO make the primary source be `definitions/vo_testtakers.xsd`.
 */
exports.testModeData = done => {
  cliPrint.headline('TestMode: Writing interface');

  const definition = JSON.parse(fs.readFileSync(`${definitionsDir}/test-mode.json`).toString());
  const modeOptions = JSON.parse(fs.readFileSync(`${definitionsDir}/mode-options.json`).toString());

  const output = [];

  output.push('// this file is automatically generated. do not change anything here directly!');
  output.push('export class TestModeData {');

  Object.keys(modeOptions)
    .forEach(option => {
      const line = `  ${option}: boolean = ${definition['RUN-DEMO'].config[option]};`;
      output.push(line);
    });

  output.push('');
  const modesList = Object.keys(definition)
    .map(mode => {
      const list = Object.keys(definition[mode].config)
        .map(option => `      ${option}: ${definition[mode].config[option]}`)
        .join(',\n');
      return `    '${mode}': {\n${list}\n    }`;
    })
    .join(',\n');
  output.push(`  static modes = {\n${modesList}\n  };`);

  output.push('');
  const labelsList = Object.keys(definition)
    .map(mode => `    '${mode}': '${definition[mode].label}'`)
    .join(',\n');
  output.push(`  static labels = {\n${labelsList}\n  };`);

  output.push('}');
  output.push('');
  fs.writeFileSync(`${commonDir}/src/classes/test-mode-data.class.ts`, output.join('\n'));
  done();
};

exports.createInterfaces = gulp.series(
  exports.bookletConfigData,
  exports.testModeData
);
